//
// File generated by rootcint at Wed Mar 12 10:28:46 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdIBaconDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "BaconDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace baconhep {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void baconhep_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("baconhep", 0 /*version*/, "./interface/TVertex.hh", 7,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &baconhep_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void baconhep_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void baconhepcLcLTAddJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTAddJet(void *p = 0);
   static void *newArray_baconhepcLcLTAddJet(Long_t size, void *p);
   static void delete_baconhepcLcLTAddJet(void *p);
   static void deleteArray_baconhepcLcLTAddJet(void *p);
   static void destruct_baconhepcLcLTAddJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TAddJet*)
   {
      ::baconhep::TAddJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TAddJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TAddJet", ::baconhep::TAddJet::Class_Version(), "./interface/TAddJet.hh", 9,
                  typeid(::baconhep::TAddJet), DefineBehavior(ptr, ptr),
                  &::baconhep::TAddJet::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TAddJet) );
      instance.SetNew(&new_baconhepcLcLTAddJet);
      instance.SetNewArray(&newArray_baconhepcLcLTAddJet);
      instance.SetDelete(&delete_baconhepcLcLTAddJet);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTAddJet);
      instance.SetDestructor(&destruct_baconhepcLcLTAddJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TAddJet*)
   {
      return GenerateInitInstanceLocal((::baconhep::TAddJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TAddJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTElectron_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTElectron(void *p = 0);
   static void *newArray_baconhepcLcLTElectron(Long_t size, void *p);
   static void delete_baconhepcLcLTElectron(void *p);
   static void deleteArray_baconhepcLcLTElectron(void *p);
   static void destruct_baconhepcLcLTElectron(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TElectron*)
   {
      ::baconhep::TElectron *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TElectron >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TElectron", ::baconhep::TElectron::Class_Version(), "./interface/TElectron.hh", 10,
                  typeid(::baconhep::TElectron), DefineBehavior(ptr, ptr),
                  &::baconhep::TElectron::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TElectron) );
      instance.SetNew(&new_baconhepcLcLTElectron);
      instance.SetNewArray(&newArray_baconhepcLcLTElectron);
      instance.SetDelete(&delete_baconhepcLcLTElectron);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTElectron);
      instance.SetDestructor(&destruct_baconhepcLcLTElectron);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TElectron*)
   {
      return GenerateInitInstanceLocal((::baconhep::TElectron*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TElectron*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTEventInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTEventInfo(void *p = 0);
   static void *newArray_baconhepcLcLTEventInfo(Long_t size, void *p);
   static void delete_baconhepcLcLTEventInfo(void *p);
   static void deleteArray_baconhepcLcLTEventInfo(void *p);
   static void destruct_baconhepcLcLTEventInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TEventInfo*)
   {
      ::baconhep::TEventInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TEventInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TEventInfo", ::baconhep::TEventInfo::Class_Version(), "./interface/TEventInfo.hh", 10,
                  typeid(::baconhep::TEventInfo), DefineBehavior(ptr, ptr),
                  &::baconhep::TEventInfo::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TEventInfo) );
      instance.SetNew(&new_baconhepcLcLTEventInfo);
      instance.SetNewArray(&newArray_baconhepcLcLTEventInfo);
      instance.SetDelete(&delete_baconhepcLcLTEventInfo);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTEventInfo);
      instance.SetDestructor(&destruct_baconhepcLcLTEventInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TEventInfo*)
   {
      return GenerateInitInstanceLocal((::baconhep::TEventInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TEventInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTGenEventInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTGenEventInfo(void *p = 0);
   static void *newArray_baconhepcLcLTGenEventInfo(Long_t size, void *p);
   static void delete_baconhepcLcLTGenEventInfo(void *p);
   static void deleteArray_baconhepcLcLTGenEventInfo(void *p);
   static void destruct_baconhepcLcLTGenEventInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TGenEventInfo*)
   {
      ::baconhep::TGenEventInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TGenEventInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TGenEventInfo", ::baconhep::TGenEventInfo::Class_Version(), "./interface/TGenEventInfo.hh", 9,
                  typeid(::baconhep::TGenEventInfo), DefineBehavior(ptr, ptr),
                  &::baconhep::TGenEventInfo::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TGenEventInfo) );
      instance.SetNew(&new_baconhepcLcLTGenEventInfo);
      instance.SetNewArray(&newArray_baconhepcLcLTGenEventInfo);
      instance.SetDelete(&delete_baconhepcLcLTGenEventInfo);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTGenEventInfo);
      instance.SetDestructor(&destruct_baconhepcLcLTGenEventInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TGenEventInfo*)
   {
      return GenerateInitInstanceLocal((::baconhep::TGenEventInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TGenEventInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTGenParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTGenParticle(void *p = 0);
   static void *newArray_baconhepcLcLTGenParticle(Long_t size, void *p);
   static void delete_baconhepcLcLTGenParticle(void *p);
   static void deleteArray_baconhepcLcLTGenParticle(void *p);
   static void destruct_baconhepcLcLTGenParticle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TGenParticle*)
   {
      ::baconhep::TGenParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TGenParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TGenParticle", ::baconhep::TGenParticle::Class_Version(), "./interface/TGenParticle.hh", 9,
                  typeid(::baconhep::TGenParticle), DefineBehavior(ptr, ptr),
                  &::baconhep::TGenParticle::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TGenParticle) );
      instance.SetNew(&new_baconhepcLcLTGenParticle);
      instance.SetNewArray(&newArray_baconhepcLcLTGenParticle);
      instance.SetDelete(&delete_baconhepcLcLTGenParticle);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTGenParticle);
      instance.SetDestructor(&destruct_baconhepcLcLTGenParticle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TGenParticle*)
   {
      return GenerateInitInstanceLocal((::baconhep::TGenParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TGenParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTJet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTJet(void *p = 0);
   static void *newArray_baconhepcLcLTJet(Long_t size, void *p);
   static void delete_baconhepcLcLTJet(void *p);
   static void deleteArray_baconhepcLcLTJet(void *p);
   static void destruct_baconhepcLcLTJet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TJet*)
   {
      ::baconhep::TJet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TJet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TJet", ::baconhep::TJet::Class_Version(), "./interface/TJet.hh", 10,
                  typeid(::baconhep::TJet), DefineBehavior(ptr, ptr),
                  &::baconhep::TJet::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TJet) );
      instance.SetNew(&new_baconhepcLcLTJet);
      instance.SetNewArray(&newArray_baconhepcLcLTJet);
      instance.SetDelete(&delete_baconhepcLcLTJet);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTJet);
      instance.SetDestructor(&destruct_baconhepcLcLTJet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TJet*)
   {
      return GenerateInitInstanceLocal((::baconhep::TJet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TJet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTMuon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTMuon(void *p = 0);
   static void *newArray_baconhepcLcLTMuon(Long_t size, void *p);
   static void delete_baconhepcLcLTMuon(void *p);
   static void deleteArray_baconhepcLcLTMuon(void *p);
   static void destruct_baconhepcLcLTMuon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TMuon*)
   {
      ::baconhep::TMuon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TMuon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TMuon", ::baconhep::TMuon::Class_Version(), "./interface/TMuon.hh", 10,
                  typeid(::baconhep::TMuon), DefineBehavior(ptr, ptr),
                  &::baconhep::TMuon::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TMuon) );
      instance.SetNew(&new_baconhepcLcLTMuon);
      instance.SetNewArray(&newArray_baconhepcLcLTMuon);
      instance.SetDelete(&delete_baconhepcLcLTMuon);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTMuon);
      instance.SetDestructor(&destruct_baconhepcLcLTMuon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TMuon*)
   {
      return GenerateInitInstanceLocal((::baconhep::TMuon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TMuon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTPFPart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTPFPart(void *p = 0);
   static void *newArray_baconhepcLcLTPFPart(Long_t size, void *p);
   static void delete_baconhepcLcLTPFPart(void *p);
   static void deleteArray_baconhepcLcLTPFPart(void *p);
   static void destruct_baconhepcLcLTPFPart(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TPFPart*)
   {
      ::baconhep::TPFPart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TPFPart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TPFPart", ::baconhep::TPFPart::Class_Version(), "./interface/TPFPart.hh", 10,
                  typeid(::baconhep::TPFPart), DefineBehavior(ptr, ptr),
                  &::baconhep::TPFPart::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TPFPart) );
      instance.SetNew(&new_baconhepcLcLTPFPart);
      instance.SetNewArray(&newArray_baconhepcLcLTPFPart);
      instance.SetDelete(&delete_baconhepcLcLTPFPart);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTPFPart);
      instance.SetDestructor(&destruct_baconhepcLcLTPFPart);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TPFPart*)
   {
      return GenerateInitInstanceLocal((::baconhep::TPFPart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TPFPart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTPhoton_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTPhoton(void *p = 0);
   static void *newArray_baconhepcLcLTPhoton(Long_t size, void *p);
   static void delete_baconhepcLcLTPhoton(void *p);
   static void deleteArray_baconhepcLcLTPhoton(void *p);
   static void destruct_baconhepcLcLTPhoton(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TPhoton*)
   {
      ::baconhep::TPhoton *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TPhoton >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TPhoton", ::baconhep::TPhoton::Class_Version(), "./interface/TPhoton.hh", 10,
                  typeid(::baconhep::TPhoton), DefineBehavior(ptr, ptr),
                  &::baconhep::TPhoton::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TPhoton) );
      instance.SetNew(&new_baconhepcLcLTPhoton);
      instance.SetNewArray(&newArray_baconhepcLcLTPhoton);
      instance.SetDelete(&delete_baconhepcLcLTPhoton);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTPhoton);
      instance.SetDestructor(&destruct_baconhepcLcLTPhoton);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TPhoton*)
   {
      return GenerateInitInstanceLocal((::baconhep::TPhoton*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TPhoton*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTTau_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTTau(void *p = 0);
   static void *newArray_baconhepcLcLTTau(Long_t size, void *p);
   static void delete_baconhepcLcLTTau(void *p);
   static void deleteArray_baconhepcLcLTTau(void *p);
   static void destruct_baconhepcLcLTTau(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TTau*)
   {
      ::baconhep::TTau *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TTau >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TTau", ::baconhep::TTau::Class_Version(), "./interface/TTau.hh", 10,
                  typeid(::baconhep::TTau), DefineBehavior(ptr, ptr),
                  &::baconhep::TTau::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TTau) );
      instance.SetNew(&new_baconhepcLcLTTau);
      instance.SetNewArray(&newArray_baconhepcLcLTTau);
      instance.SetDelete(&delete_baconhepcLcLTTau);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTTau);
      instance.SetDestructor(&destruct_baconhepcLcLTTau);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TTau*)
   {
      return GenerateInitInstanceLocal((::baconhep::TTau*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TTau*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void baconhepcLcLTVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_baconhepcLcLTVertex(void *p = 0);
   static void *newArray_baconhepcLcLTVertex(Long_t size, void *p);
   static void delete_baconhepcLcLTVertex(void *p);
   static void deleteArray_baconhepcLcLTVertex(void *p);
   static void destruct_baconhepcLcLTVertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::baconhep::TVertex*)
   {
      ::baconhep::TVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::baconhep::TVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("baconhep::TVertex", ::baconhep::TVertex::Class_Version(), "./interface/TVertex.hh", 9,
                  typeid(::baconhep::TVertex), DefineBehavior(ptr, ptr),
                  &::baconhep::TVertex::Dictionary, isa_proxy, 4,
                  sizeof(::baconhep::TVertex) );
      instance.SetNew(&new_baconhepcLcLTVertex);
      instance.SetNewArray(&newArray_baconhepcLcLTVertex);
      instance.SetDelete(&delete_baconhepcLcLTVertex);
      instance.SetDeleteArray(&deleteArray_baconhepcLcLTVertex);
      instance.SetDestructor(&destruct_baconhepcLcLTVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::baconhep::TVertex*)
   {
      return GenerateInitInstanceLocal((::baconhep::TVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::baconhep::TVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace baconhep {
//______________________________________________________________________________
TClass *TAddJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TAddJet::Class_Name()
{
   return "baconhep::TAddJet";
}

//______________________________________________________________________________
const char *TAddJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TAddJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TAddJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TAddJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TAddJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TAddJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TAddJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TAddJet*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TElectron::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TElectron::Class_Name()
{
   return "baconhep::TElectron";
}

//______________________________________________________________________________
const char *TElectron::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TElectron*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TElectron::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TElectron*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TElectron::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TElectron*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TElectron::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TElectron*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TEventInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TEventInfo::Class_Name()
{
   return "baconhep::TEventInfo";
}

//______________________________________________________________________________
const char *TEventInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TEventInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TEventInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TEventInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TEventInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TEventInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TEventInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TEventInfo*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TGenEventInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGenEventInfo::Class_Name()
{
   return "baconhep::TGenEventInfo";
}

//______________________________________________________________________________
const char *TGenEventInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TGenEventInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGenEventInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TGenEventInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGenEventInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TGenEventInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGenEventInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TGenEventInfo*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TGenParticle::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGenParticle::Class_Name()
{
   return "baconhep::TGenParticle";
}

//______________________________________________________________________________
const char *TGenParticle::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TGenParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGenParticle::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TGenParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGenParticle::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TGenParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGenParticle::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TGenParticle*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TJet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TJet::Class_Name()
{
   return "baconhep::TJet";
}

//______________________________________________________________________________
const char *TJet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TJet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TJet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TJet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TJet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TJet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TJet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TJet*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TMuon::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TMuon::Class_Name()
{
   return "baconhep::TMuon";
}

//______________________________________________________________________________
const char *TMuon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TMuon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TMuon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TMuon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TMuon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TMuon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TMuon::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TMuon*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TPFPart::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPFPart::Class_Name()
{
   return "baconhep::TPFPart";
}

//______________________________________________________________________________
const char *TPFPart::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TPFPart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPFPart::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TPFPart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPFPart::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TPFPart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPFPart::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TPFPart*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TPhoton::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TPhoton::Class_Name()
{
   return "baconhep::TPhoton";
}

//______________________________________________________________________________
const char *TPhoton::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TPhoton*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TPhoton::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TPhoton*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TPhoton::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TPhoton*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TPhoton::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TPhoton*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TTau::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TTau::Class_Name()
{
   return "baconhep::TTau";
}

//______________________________________________________________________________
const char *TTau::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TTau*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TTau::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TTau*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TTau::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TTau*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TTau::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TTau*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
TClass *TVertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TVertex::Class_Name()
{
   return "baconhep::TVertex";
}

//______________________________________________________________________________
const char *TVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TVertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::baconhep::TVertex*)0x0)->GetClass();
   return fgIsA;
}

} // namespace baconhep
      namespace baconhep {
//______________________________________________________________________________
void TEventInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TEventInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TEventInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TEventInfo::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TEventInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TEventInfo.
      TClass *R__cl = ::baconhep::TEventInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runNum", &runNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtNum", &evtNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lumiSec", &lumiSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metFilterFailBits", &metFilterFailBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPU", &nPU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPUm", &nPUm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPUp", &nPUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPUmean", &nPUmean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPUmeanm", &nPUmeanm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPUmeanp", &nPUmeanp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvx", &pvx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvy", &pvy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pvz", &pvz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bsx", &bsx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bsy", &bsy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bsz", &bsz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMET", &pfMET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMETphi", &pfMETphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMETCov00", &pfMETCov00);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMETCov01", &pfMETCov01);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfMETCov11", &pfMETCov11);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMET", &mvaMET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMETphi", &mvaMETphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMETCov00", &mvaMETCov00);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMETCov01", &mvaMETCov01);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMETCov11", &mvaMETCov11);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMETU", &mvaMETU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMETUphi", &mvaMETUphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMETUCov00", &mvaMETUCov00);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMETUCov01", &mvaMETUCov01);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaMETUCov11", &mvaMETUCov11);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkMET", &trkMET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkMETphi", &trkMETphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhoIso", &rhoIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rhoJet", &rhoJet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "triggerBits", (void*)&triggerBits);
      R__insp.InspectMember("TriggerBits", (void*)&triggerBits, "triggerBits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasGoodPV", &hasGoodPV);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTEventInfo(void *p) {
      return  p ? new(p) ::baconhep::TEventInfo : new ::baconhep::TEventInfo;
   }
   static void *newArray_baconhepcLcLTEventInfo(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TEventInfo[nElements] : new ::baconhep::TEventInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTEventInfo(void *p) {
      delete ((::baconhep::TEventInfo*)p);
   }
   static void deleteArray_baconhepcLcLTEventInfo(void *p) {
      delete [] ((::baconhep::TEventInfo*)p);
   }
   static void destruct_baconhepcLcLTEventInfo(void *p) {
      typedef ::baconhep::TEventInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TEventInfo

      namespace baconhep {
//______________________________________________________________________________
void TGenEventInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TGenEventInfo.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TGenEventInfo::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TGenEventInfo::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TGenEventInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TGenEventInfo.
      TClass *R__cl = ::baconhep::TGenEventInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_1", &id_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_2", &id_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_1", &x_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x_2", &x_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scalePDF", &scalePDF);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTGenEventInfo(void *p) {
      return  p ? new(p) ::baconhep::TGenEventInfo : new ::baconhep::TGenEventInfo;
   }
   static void *newArray_baconhepcLcLTGenEventInfo(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TGenEventInfo[nElements] : new ::baconhep::TGenEventInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTGenEventInfo(void *p) {
      delete ((::baconhep::TGenEventInfo*)p);
   }
   static void deleteArray_baconhepcLcLTGenEventInfo(void *p) {
      delete [] ((::baconhep::TGenEventInfo*)p);
   }
   static void destruct_baconhepcLcLTGenEventInfo(void *p) {
      typedef ::baconhep::TGenEventInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TGenEventInfo

      namespace baconhep {
//______________________________________________________________________________
void TGenParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TGenParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TGenParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TGenParticle::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TGenParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TGenParticle.
      TClass *R__cl = ::baconhep::TGenParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parent", &parent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgId", &pdgId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTGenParticle(void *p) {
      return  p ? new(p) ::baconhep::TGenParticle : new ::baconhep::TGenParticle;
   }
   static void *newArray_baconhepcLcLTGenParticle(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TGenParticle[nElements] : new ::baconhep::TGenParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTGenParticle(void *p) {
      delete ((::baconhep::TGenParticle*)p);
   }
   static void deleteArray_baconhepcLcLTGenParticle(void *p) {
      delete [] ((::baconhep::TGenParticle*)p);
   }
   static void destruct_baconhepcLcLTGenParticle(void *p) {
      typedef ::baconhep::TGenParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TGenParticle

      namespace baconhep {
//______________________________________________________________________________
void TElectron::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TElectron.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TElectron::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TElectron::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TElectron::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TElectron.
      TClass *R__cl = ::baconhep::TElectron::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEt", &scEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEta", &scEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPhi", &scPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptHZZ4l", &ptHZZ4l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptErrHZZ4l", &ptErrHZZ4l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEtHZZ4l", &scEtHZZ4l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r9", &r9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalEnergy", &ecalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfPt", &pfPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfEta", &pfEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfPhi", &pfPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkIso03", &trkIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalIso03", &ecalIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalIso03", &hcalIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chHadIso03", &chHadIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammaIso03", &gammaIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neuHadIso03", &neuHadIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chHadIso04", &chHadIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammaIso04", &gammaIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neuHadIso04", &neuHadIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0", &d0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sip3d", &sip3d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sieie", &sieie);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eoverp", &eoverp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hovere", &hovere);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbrem", &fbrem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dEtaIn", &dEtaIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPhiIn", &dPhiIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mva", &mva);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "q", &q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "classification", &classification);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isConv", &isConv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMissingHits", &nMissingHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeBits", &typeBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiducialBits", &fiducialBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scID", &scID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkID", &trkID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMatchBits", (void*)&hltMatchBits);
      R__insp.InspectMember("TriggerObjects", (void*)&hltMatchBits, "hltMatchBits.", false);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTElectron(void *p) {
      return  p ? new(p) ::baconhep::TElectron : new ::baconhep::TElectron;
   }
   static void *newArray_baconhepcLcLTElectron(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TElectron[nElements] : new ::baconhep::TElectron[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTElectron(void *p) {
      delete ((::baconhep::TElectron*)p);
   }
   static void deleteArray_baconhepcLcLTElectron(void *p) {
      delete [] ((::baconhep::TElectron*)p);
   }
   static void destruct_baconhepcLcLTElectron(void *p) {
      typedef ::baconhep::TElectron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TElectron

      namespace baconhep {
//______________________________________________________________________________
void TMuon::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TMuon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TMuon::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TMuon::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TMuon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TMuon.
      TClass *R__cl = ::baconhep::TMuon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptErr", &ptErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptHZZ4l", &ptHZZ4l);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "staPt", &staPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "staEta", &staEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "staPhi", &staPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfPt", &pfPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfEta", &pfEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfPhi", &pfPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkIso03", &trkIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalIso03", &ecalIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalIso03", &hcalIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chHadIso03", &chHadIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammaIso03", &gammaIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neuHadIso03", &neuHadIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIso03", &puIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chHadIso04", &chHadIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammaIso04", &gammaIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neuHadIso04", &neuHadIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "puIso04", &puIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0", &d0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sip3d", &sip3d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tkNchi2", &tkNchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muNchi2", &muNchi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkKink", &trkKink);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "glbKink", &glbKink);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "q", &q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nValidHits", &nValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeBits", &typeBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "selectorBits", &selectorBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTkHits", &nTkHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPixHits", &nPixHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTkLayers", &nTkLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPixLayers", &nPixLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMatchStn", &nMatchStn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkID", &trkID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMatchBits", (void*)&hltMatchBits);
      R__insp.InspectMember("TriggerObjects", (void*)&hltMatchBits, "hltMatchBits.", false);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTMuon(void *p) {
      return  p ? new(p) ::baconhep::TMuon : new ::baconhep::TMuon;
   }
   static void *newArray_baconhepcLcLTMuon(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TMuon[nElements] : new ::baconhep::TMuon[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTMuon(void *p) {
      delete ((::baconhep::TMuon*)p);
   }
   static void deleteArray_baconhepcLcLTMuon(void *p) {
      delete [] ((::baconhep::TMuon*)p);
   }
   static void destruct_baconhepcLcLTMuon(void *p) {
      typedef ::baconhep::TMuon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TMuon

      namespace baconhep {
//______________________________________________________________________________
void TTau::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TTau.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TTau::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TTau::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TTau::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TTau.
      TClass *R__cl = ::baconhep::TTau::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m", &m);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e", &e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "q", &q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzLeadChHad", &dzLeadChHad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSignalChHad", &nSignalChHad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSignalGamma", &nSignalGamma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ringIso", &ringIso);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ringIso2", &ringIso2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "antiEleMVA3", &antiEleMVA3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "antiEleMVA3Cat", &antiEleMVA3Cat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawIso3Hits", &rawIso3Hits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawIsoMVA3", &rawIsoMVA3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hpsDisc", &hpsDisc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMatchBits", (void*)&hltMatchBits);
      R__insp.InspectMember("TriggerObjects", (void*)&hltMatchBits, "hltMatchBits.", false);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTTau(void *p) {
      return  p ? new(p) ::baconhep::TTau : new ::baconhep::TTau;
   }
   static void *newArray_baconhepcLcLTTau(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TTau[nElements] : new ::baconhep::TTau[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTTau(void *p) {
      delete ((::baconhep::TTau*)p);
   }
   static void deleteArray_baconhepcLcLTTau(void *p) {
      delete [] ((::baconhep::TTau*)p);
   }
   static void destruct_baconhepcLcLTTau(void *p) {
      typedef ::baconhep::TTau current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TTau

      namespace baconhep {
//______________________________________________________________________________
void TJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TJet::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TJet.
      TClass *R__cl = ::baconhep::TJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptRaw", &ptRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "unc", &unc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area", &area);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0", &d0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "csv", &csv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "csv1", &csv1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "csv2", &csv2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mva", &mva);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qgid", &qgid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qg1", &qg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qg2", &qg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau1", &tau1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau2", &tau2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau3", &tau3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau4", &tau4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "prunedm", &prunedm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCharged", &nCharged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nNeutrals", &nNeutrals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nParticles", &nParticles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "betaStar", &betaStar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dR2Mean", &dR2Mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptD", &ptD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "q", &q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pull", &pull);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pullAngle", &pullAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chEmFrac", &chEmFrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neuEmFrac", &neuEmFrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chHadFrac", &chHadFrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neuHadFrac", &neuHadFrac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcFlavor", &mcFlavor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mcFlavorPhys", &mcFlavorPhys);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genpt", &genpt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geneta", &geneta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genphi", &genphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "genm", &genm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMatchBits", (void*)&hltMatchBits);
      R__insp.InspectMember("TriggerObjects", (void*)&hltMatchBits, "hltMatchBits.", false);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTJet(void *p) {
      return  p ? new(p) ::baconhep::TJet : new ::baconhep::TJet;
   }
   static void *newArray_baconhepcLcLTJet(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TJet[nElements] : new ::baconhep::TJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTJet(void *p) {
      delete ((::baconhep::TJet*)p);
   }
   static void deleteArray_baconhepcLcLTJet(void *p) {
      delete [] ((::baconhep::TJet*)p);
   }
   static void destruct_baconhepcLcLTJet(void *p) {
      typedef ::baconhep::TJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TJet

      namespace baconhep {
//______________________________________________________________________________
void TAddJet::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TAddJet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TAddJet::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TAddJet::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TAddJet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TAddJet.
      TClass *R__cl = ::baconhep::TAddJet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_p1", &pt_p1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptraw_p1", &ptraw_p1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_p1", &eta_p1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_p1", &phi_p1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass_p1", &mass_p1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area_p1", &area_p1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_p2", &pt_p2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptraw_p2", &ptraw_p2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_p2", &eta_p2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_p2", &phi_p2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass_p2", &mass_p2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area_p2", &area_p2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_t1", &pt_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptraw_t1", &ptraw_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_t1", &eta_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_t1", &phi_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass_t1", &mass_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area_t1", &area_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_t2", &pt_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptraw_t2", &ptraw_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_t2", &eta_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_t2", &phi_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass_t2", &mass_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area_t2", &area_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_t3", &pt_t3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptraw_t3", &ptraw_t3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_t3", &eta_t3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_t3", &phi_t3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass_t3", &mass_t3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area_t3", &area_t3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_t4", &pt_t4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptraw_t4", &ptraw_t4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_t4", &eta_t4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_t4", &phi_t4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass_t4", &mass_t4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area_t4", &area_t4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_f1", &pt_f1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptraw_f1", &ptraw_f1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_f1", &eta_f1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_f1", &phi_f1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass_f1", &mass_f1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area_f1", &area_f1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt_f2", &pt_f2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptraw_f2", &ptraw_f2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta_f2", &eta_f2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_f2", &phi_f2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass_f2", &mass_f2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "area_f2", &area_f2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c2_0", &c2_0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c2_0P2", &c2_0P2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c2_0P5", &c2_0P5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c2_1P0", &c2_1P0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c2_2P0", &c2_2P0);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTAddJet(void *p) {
      return  p ? new(p) ::baconhep::TAddJet : new ::baconhep::TAddJet;
   }
   static void *newArray_baconhepcLcLTAddJet(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TAddJet[nElements] : new ::baconhep::TAddJet[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTAddJet(void *p) {
      delete ((::baconhep::TAddJet*)p);
   }
   static void deleteArray_baconhepcLcLTAddJet(void *p) {
      delete [] ((::baconhep::TAddJet*)p);
   }
   static void destruct_baconhepcLcLTAddJet(void *p) {
      typedef ::baconhep::TAddJet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TAddJet

      namespace baconhep {
//______________________________________________________________________________
void TPhoton::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TPhoton.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TPhoton::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TPhoton::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TPhoton::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TPhoton.
      TClass *R__cl = ::baconhep::TPhoton::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEt", &scEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scEta", &scEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scPhi", &scPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "r9", &r9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfPt", &pfPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfEta", &pfEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfPhi", &pfPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkIso04", &trkIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalIso04", &ecalIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalIso04", &hcalIso04);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chHadIso03", &chHadIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gammaIso03", &gammaIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neuHadIso03", &neuHadIso03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoForFsr03", &isoForFsr03);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mvaNothingGamma", &mvaNothingGamma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hovere", &hovere);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sieie", &sieie);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sipip", &sipip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fiducialBits", &fiducialBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "typeBits", &typeBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scID", &scID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasPixelSeed", &hasPixelSeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isConv", &isConv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hltMatchBits", (void*)&hltMatchBits);
      R__insp.InspectMember("TriggerObjects", (void*)&hltMatchBits, "hltMatchBits.", false);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTPhoton(void *p) {
      return  p ? new(p) ::baconhep::TPhoton : new ::baconhep::TPhoton;
   }
   static void *newArray_baconhepcLcLTPhoton(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TPhoton[nElements] : new ::baconhep::TPhoton[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTPhoton(void *p) {
      delete ((::baconhep::TPhoton*)p);
   }
   static void deleteArray_baconhepcLcLTPhoton(void *p) {
      delete [] ((::baconhep::TPhoton*)p);
   }
   static void destruct_baconhepcLcLTPhoton(void *p) {
      typedef ::baconhep::TPhoton current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TPhoton

      namespace baconhep {
//______________________________________________________________________________
void TVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TVertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TVertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TVertex::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TVertex.
      TClass *R__cl = ::baconhep::TVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksFit", &nTracksFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "y", &y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "z", &z);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTVertex(void *p) {
      return  p ? new(p) ::baconhep::TVertex : new ::baconhep::TVertex;
   }
   static void *newArray_baconhepcLcLTVertex(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TVertex[nElements] : new ::baconhep::TVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTVertex(void *p) {
      delete ((::baconhep::TVertex*)p);
   }
   static void deleteArray_baconhepcLcLTVertex(void *p) {
      delete [] ((::baconhep::TVertex*)p);
   }
   static void destruct_baconhepcLcLTVertex(void *p) {
      typedef ::baconhep::TVertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TVertex

      namespace baconhep {
//______________________________________________________________________________
void TPFPart::Streamer(TBuffer &R__b)
{
   // Stream an object of class baconhep::TPFPart.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(baconhep::TPFPart::Class(),this);
   } else {
      R__b.WriteClassBuffer(baconhep::TPFPart::Class(),this);
   }
}

} // namespace baconhep
//______________________________________________________________________________
      namespace baconhep {
void TPFPart::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class baconhep::TPFPart.
      TClass *R__cl = ::baconhep::TPFPart::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m", &m);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e", &e);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "q", &q);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pfType", &pfType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxId", &vtxId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkChi2", &trkChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxChi2", &vtxChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecalE", &ecalE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcalE", &hcalE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d0", &d0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "depth", &depth);
      TObject::ShowMembers(R__insp);
}

} // namespace baconhep
namespace ROOT {
   // Wrappers around operator new
   static void *new_baconhepcLcLTPFPart(void *p) {
      return  p ? new(p) ::baconhep::TPFPart : new ::baconhep::TPFPart;
   }
   static void *newArray_baconhepcLcLTPFPart(Long_t nElements, void *p) {
      return p ? new(p) ::baconhep::TPFPart[nElements] : new ::baconhep::TPFPart[nElements];
   }
   // Wrapper around operator delete
   static void delete_baconhepcLcLTPFPart(void *p) {
      delete ((::baconhep::TPFPart*)p);
   }
   static void deleteArray_baconhepcLcLTPFPart(void *p) {
      delete [] ((::baconhep::TPFPart*)p);
   }
   static void destruct_baconhepcLcLTPFPart(void *p) {
      typedef ::baconhep::TPFPart current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::baconhep::TPFPart

namespace ROOT {
   void bitsetlE128gR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void bitsetlE128gR_Dictionary();
   static void *new_bitsetlE128gR(void *p = 0);
   static void *newArray_bitsetlE128gR(Long_t size, void *p);
   static void delete_bitsetlE128gR(void *p);
   static void deleteArray_bitsetlE128gR(void *p);
   static void destruct_bitsetlE128gR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const bitset<128>*)
   {
      bitset<128> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(bitset<128>),0);
      static ::ROOT::TGenericClassInfo 
         instance("bitset<128>", 2, "prec_stl/bitset", 20,
                  typeid(bitset<128>), DefineBehavior(ptr, ptr),
                  0, &bitsetlE128gR_Dictionary, isa_proxy, 0,
                  sizeof(bitset<128>) );
      instance.SetNew(&new_bitsetlE128gR);
      instance.SetNewArray(&newArray_bitsetlE128gR);
      instance.SetDelete(&delete_bitsetlE128gR);
      instance.SetDeleteArray(&deleteArray_bitsetlE128gR);
      instance.SetDestructor(&destruct_bitsetlE128gR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback<TStdBitsetHelper< bitset<128> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const bitset<128>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void bitsetlE128gR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const bitset<128>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_bitsetlE128gR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) bitset<128> : new bitset<128>;
   }
   static void *newArray_bitsetlE128gR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) bitset<128>[nElements] : new bitset<128>[nElements];
   }
   // Wrapper around operator delete
   static void delete_bitsetlE128gR(void *p) {
      delete ((bitset<128>*)p);
   }
   static void deleteArray_bitsetlE128gR(void *p) {
      delete [] ((bitset<128>*)p);
   }
   static void destruct_bitsetlE128gR(void *p) {
      typedef bitset<128> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class bitset<128>

namespace ROOT {
   void bitsetlE256gR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void bitsetlE256gR_Dictionary();
   static void *new_bitsetlE256gR(void *p = 0);
   static void *newArray_bitsetlE256gR(Long_t size, void *p);
   static void delete_bitsetlE256gR(void *p);
   static void deleteArray_bitsetlE256gR(void *p);
   static void destruct_bitsetlE256gR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const bitset<256>*)
   {
      bitset<256> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(bitset<256>),0);
      static ::ROOT::TGenericClassInfo 
         instance("bitset<256>", 2, "prec_stl/bitset", 20,
                  typeid(bitset<256>), DefineBehavior(ptr, ptr),
                  0, &bitsetlE256gR_Dictionary, isa_proxy, 0,
                  sizeof(bitset<256>) );
      instance.SetNew(&new_bitsetlE256gR);
      instance.SetNewArray(&newArray_bitsetlE256gR);
      instance.SetDelete(&delete_bitsetlE256gR);
      instance.SetDeleteArray(&deleteArray_bitsetlE256gR);
      instance.SetDestructor(&destruct_bitsetlE256gR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback<TStdBitsetHelper< bitset<256> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const bitset<256>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void bitsetlE256gR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const bitset<256>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_bitsetlE256gR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) bitset<256> : new bitset<256>;
   }
   static void *newArray_bitsetlE256gR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) bitset<256>[nElements] : new bitset<256>[nElements];
   }
   // Wrapper around operator delete
   static void delete_bitsetlE256gR(void *p) {
      delete ((bitset<256>*)p);
   }
   static void deleteArray_bitsetlE256gR(void *p) {
      delete [] ((bitset<256>*)p);
   }
   static void destruct_bitsetlE256gR(void *p) {
      typedef bitset<256> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class bitset<256>

/********************************************************
* src/BaconDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableBaconDict();

extern "C" void G__set_cpp_environmentBaconDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("interface/BaconAnaDefs.hh");
  G__add_compiledheader("interface/TAddJet.hh");
  G__add_compiledheader("interface/TElectron.hh");
  G__add_compiledheader("interface/TEventInfo.hh");
  G__add_compiledheader("interface/TGenEventInfo.hh");
  G__add_compiledheader("interface/TGenParticle.hh");
  G__add_compiledheader("interface/TJet.hh");
  G__add_compiledheader("interface/TMuon.hh");
  G__add_compiledheader("interface/TPFPart.hh");
  G__add_compiledheader("interface/TPhoton.hh");
  G__add_compiledheader("interface/TTau.hh");
  G__add_compiledheader("interface/TTrigger.hh");
  G__add_compiledheader("interface/TVertex.hh");
  G__add_compiledheader("interface/TriggerRecord.hh");
  G__cpp_reset_tagtableBaconDict();
}
#include <new>
extern "C" int G__cpp_dllrevBaconDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* baconhep */

/* baconhep::TAddJet */
static int G__BaconDict_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TAddJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TAddJet[n];
     } else {
       p = new((void*) gvp) baconhep::TAddJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TAddJet;
     } else {
       p = new((void*) gvp) baconhep::TAddJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTAddJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_175_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TAddJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_175_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TAddJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TAddJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TAddJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_175_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TAddJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_175_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TAddJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_175_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TAddJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TAddJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TAddJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TAddJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TAddJet(*(baconhep::TAddJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTAddJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TAddJet G__TbaconhepcLcLTAddJet;
static int G__BaconDict_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TAddJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TAddJet*) (soff+(sizeof(baconhep::TAddJet)*i)))->~G__TbaconhepcLcLTAddJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TAddJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TAddJet*) (soff))->~G__TbaconhepcLcLTAddJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TAddJet* dest = (baconhep::TAddJet*) G__getstructoffset();
   *dest = *(baconhep::TAddJet*) libp->para[0].ref;
   const baconhep::TAddJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TElectron */
static int G__BaconDict_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TElectron* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TElectron[n];
     } else {
       p = new((void*) gvp) baconhep::TElectron[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TElectron;
     } else {
       p = new((void*) gvp) baconhep::TElectron;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TElectron::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TElectron::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TElectron::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TElectron::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TElectron*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_176_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TElectron::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TElectron::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_176_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TElectron::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TElectron::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TElectron* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TElectron(*(baconhep::TElectron*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTElectron));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TElectron G__TbaconhepcLcLTElectron;
static int G__BaconDict_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TElectron*) (soff+(sizeof(baconhep::TElectron)*i)))->~G__TbaconhepcLcLTElectron();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TElectron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TElectron*) (soff))->~G__TbaconhepcLcLTElectron();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TElectron* dest = (baconhep::TElectron*) G__getstructoffset();
   *dest = *(baconhep::TElectron*) libp->para[0].ref;
   const baconhep::TElectron& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TEventInfo */
static int G__BaconDict_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TEventInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TEventInfo[n];
     } else {
       p = new((void*) gvp) baconhep::TEventInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TEventInfo;
     } else {
       p = new((void*) gvp) baconhep::TEventInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTEventInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TEventInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_178_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TEventInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TEventInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TEventInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_178_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TEventInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_178_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TEventInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TEventInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TEventInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TEventInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_178_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TEventInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TEventInfo(*(baconhep::TEventInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTEventInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TEventInfo G__TbaconhepcLcLTEventInfo;
static int G__BaconDict_178_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TEventInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TEventInfo*) (soff+(sizeof(baconhep::TEventInfo)*i)))->~G__TbaconhepcLcLTEventInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TEventInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TEventInfo*) (soff))->~G__TbaconhepcLcLTEventInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_178_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TEventInfo* dest = (baconhep::TEventInfo*) G__getstructoffset();
   *dest = *(baconhep::TEventInfo*) libp->para[0].ref;
   const baconhep::TEventInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TGenEventInfo */
static int G__BaconDict_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TGenEventInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TGenEventInfo[n];
     } else {
       p = new((void*) gvp) baconhep::TGenEventInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TGenEventInfo;
     } else {
       p = new((void*) gvp) baconhep::TGenEventInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenEventInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TGenEventInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TGenEventInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TGenEventInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TGenEventInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TGenEventInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TGenEventInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TGenEventInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TGenEventInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TGenEventInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TGenEventInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TGenEventInfo(*(baconhep::TGenEventInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenEventInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TGenEventInfo G__TbaconhepcLcLTGenEventInfo;
static int G__BaconDict_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TGenEventInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TGenEventInfo*) (soff+(sizeof(baconhep::TGenEventInfo)*i)))->~G__TbaconhepcLcLTGenEventInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TGenEventInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TGenEventInfo*) (soff))->~G__TbaconhepcLcLTGenEventInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_179_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TGenEventInfo* dest = (baconhep::TGenEventInfo*) G__getstructoffset();
   *dest = *(baconhep::TGenEventInfo*) libp->para[0].ref;
   const baconhep::TGenEventInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TGenParticle */
static int G__BaconDict_180_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TGenParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TGenParticle[n];
     } else {
       p = new((void*) gvp) baconhep::TGenParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TGenParticle;
     } else {
       p = new((void*) gvp) baconhep::TGenParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_180_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TGenParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_180_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TGenParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_180_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TGenParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_180_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TGenParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_180_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TGenParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_180_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TGenParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_180_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TGenParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_180_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TGenParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_180_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TGenParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_180_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TGenParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TGenParticle(*(baconhep::TGenParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TGenParticle G__TbaconhepcLcLTGenParticle;
static int G__BaconDict_180_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TGenParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TGenParticle*) (soff+(sizeof(baconhep::TGenParticle)*i)))->~G__TbaconhepcLcLTGenParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TGenParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TGenParticle*) (soff))->~G__TbaconhepcLcLTGenParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_180_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TGenParticle* dest = (baconhep::TGenParticle*) G__getstructoffset();
   *dest = *(baconhep::TGenParticle*) libp->para[0].ref;
   const baconhep::TGenParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TJet */
static int G__BaconDict_181_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TJet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TJet[n];
     } else {
       p = new((void*) gvp) baconhep::TJet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TJet;
     } else {
       p = new((void*) gvp) baconhep::TJet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTJet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_181_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TJet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_181_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TJet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TJet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TJet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TJet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TJet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TJet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_181_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TJet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_181_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TJet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TJet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TJet(*(baconhep::TJet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTJet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TJet G__TbaconhepcLcLTJet;
static int G__BaconDict_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TJet*) (soff+(sizeof(baconhep::TJet)*i)))->~G__TbaconhepcLcLTJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TJet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TJet*) (soff))->~G__TbaconhepcLcLTJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TJet* dest = (baconhep::TJet*) G__getstructoffset();
   *dest = *(baconhep::TJet*) libp->para[0].ref;
   const baconhep::TJet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TMuon */
static int G__BaconDict_182_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TMuon* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TMuon[n];
     } else {
       p = new((void*) gvp) baconhep::TMuon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TMuon;
     } else {
       p = new((void*) gvp) baconhep::TMuon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_182_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TMuon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_182_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TMuon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_182_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TMuon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_182_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TMuon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TMuon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TMuon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_182_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TMuon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_182_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TMuon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_182_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TMuon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_182_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TMuon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TMuon(*(baconhep::TMuon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TMuon G__TbaconhepcLcLTMuon;
static int G__BaconDict_182_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TMuon*) (soff+(sizeof(baconhep::TMuon)*i)))->~G__TbaconhepcLcLTMuon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TMuon*) (soff))->~G__TbaconhepcLcLTMuon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_182_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TMuon* dest = (baconhep::TMuon*) G__getstructoffset();
   *dest = *(baconhep::TMuon*) libp->para[0].ref;
   const baconhep::TMuon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TPFPart */
static int G__BaconDict_185_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TPFPart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TPFPart[n];
     } else {
       p = new((void*) gvp) baconhep::TPFPart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TPFPart;
     } else {
       p = new((void*) gvp) baconhep::TPFPart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPFPart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_185_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TPFPart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TPFPart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TPFPart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TPFPart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TPFPart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TPFPart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TPFPart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_185_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TPFPart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_185_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TPFPart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_185_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TPFPart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TPFPart(*(baconhep::TPFPart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPFPart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TPFPart G__TbaconhepcLcLTPFPart;
static int G__BaconDict_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TPFPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TPFPart*) (soff+(sizeof(baconhep::TPFPart)*i)))->~G__TbaconhepcLcLTPFPart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TPFPart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TPFPart*) (soff))->~G__TbaconhepcLcLTPFPart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_185_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TPFPart* dest = (baconhep::TPFPart*) G__getstructoffset();
   *dest = *(baconhep::TPFPart*) libp->para[0].ref;
   const baconhep::TPFPart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TPhoton */
static int G__BaconDict_186_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TPhoton* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TPhoton[n];
     } else {
       p = new((void*) gvp) baconhep::TPhoton[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TPhoton;
     } else {
       p = new((void*) gvp) baconhep::TPhoton;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPhoton));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_186_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TPhoton::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TPhoton::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TPhoton::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TPhoton::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TPhoton*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TPhoton::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TPhoton::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TPhoton::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TPhoton::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TPhoton* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TPhoton(*(baconhep::TPhoton*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPhoton));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TPhoton G__TbaconhepcLcLTPhoton;
static int G__BaconDict_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TPhoton*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TPhoton*) (soff+(sizeof(baconhep::TPhoton)*i)))->~G__TbaconhepcLcLTPhoton();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TPhoton*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TPhoton*) (soff))->~G__TbaconhepcLcLTPhoton();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TPhoton* dest = (baconhep::TPhoton*) G__getstructoffset();
   *dest = *(baconhep::TPhoton*) libp->para[0].ref;
   const baconhep::TPhoton& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TTau */
static int G__BaconDict_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TTau* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TTau[n];
     } else {
       p = new((void*) gvp) baconhep::TTau[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TTau;
     } else {
       p = new((void*) gvp) baconhep::TTau;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTTau));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_188_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TTau::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TTau::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TTau::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TTau::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_188_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TTau*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TTau::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TTau::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TTau::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TTau::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TTau* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TTau(*(baconhep::TTau*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTTau));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TTau G__TbaconhepcLcLTTau;
static int G__BaconDict_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TTau*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TTau*) (soff+(sizeof(baconhep::TTau)*i)))->~G__TbaconhepcLcLTTau();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TTau*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TTau*) (soff))->~G__TbaconhepcLcLTTau();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TTau* dest = (baconhep::TTau*) G__getstructoffset();
   *dest = *(baconhep::TTau*) libp->para[0].ref;
   const baconhep::TTau& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* baconhep::TVertex */
static int G__BaconDict_201_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TVertex[n];
     } else {
       p = new((void*) gvp) baconhep::TVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new baconhep::TVertex;
     } else {
       p = new((void*) gvp) baconhep::TVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) baconhep::TVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_201_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) baconhep::TVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_201_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      baconhep::TVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_201_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((baconhep::TVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_201_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) baconhep::TVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BaconDict_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) baconhep::TVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BaconDict_201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   baconhep::TVertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new baconhep::TVertex(*(baconhep::TVertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef baconhep::TVertex G__TbaconhepcLcLTVertex;
static int G__BaconDict_201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (baconhep::TVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((baconhep::TVertex*) (soff+(sizeof(baconhep::TVertex)*i)))->~G__TbaconhepcLcLTVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (baconhep::TVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((baconhep::TVertex*) (soff))->~G__TbaconhepcLcLTVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BaconDict_201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   baconhep::TVertex* dest = (baconhep::TVertex*) G__getstructoffset();
   *dest = *(baconhep::TVertex*) libp->para[0].ref;
   const baconhep::TVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* baconhep */

/* baconhep::TAddJet */

/* baconhep::TElectron */

/* baconhep::TEventInfo */

/* baconhep::TGenEventInfo */

/* baconhep::TGenParticle */

/* baconhep::TJet */

/* baconhep::TMuon */

/* baconhep::TPFPart */

/* baconhep::TPhoton */

/* baconhep::TTau */

/* baconhep::TVertex */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncBaconDict {
 public:
  G__Sizep2memfuncBaconDict(): p(&G__Sizep2memfuncBaconDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncBaconDict::*p)();
};

size_t G__get_sizep2memfuncBaconDict()
{
  G__Sizep2memfuncBaconDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceBaconDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTAddJet))) {
     baconhep::TAddJet *G__Lderived;
     G__Lderived=(baconhep::TAddJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTAddJet),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTElectron))) {
     baconhep::TElectron *G__Lderived;
     G__Lderived=(baconhep::TElectron*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTElectron),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTEventInfo))) {
     baconhep::TEventInfo *G__Lderived;
     G__Lderived=(baconhep::TEventInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTEventInfo),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenEventInfo))) {
     baconhep::TGenEventInfo *G__Lderived;
     G__Lderived=(baconhep::TGenEventInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenEventInfo),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenParticle))) {
     baconhep::TGenParticle *G__Lderived;
     G__Lderived=(baconhep::TGenParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenParticle),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTJet))) {
     baconhep::TJet *G__Lderived;
     G__Lderived=(baconhep::TJet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTJet),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTMuon))) {
     baconhep::TMuon *G__Lderived;
     G__Lderived=(baconhep::TMuon*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTMuon),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPFPart))) {
     baconhep::TPFPart *G__Lderived;
     G__Lderived=(baconhep::TPFPart*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPFPart),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPhoton))) {
     baconhep::TPhoton *G__Lderived;
     G__Lderived=(baconhep::TPhoton*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPhoton),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTTau))) {
     baconhep::TTau *G__Lderived;
     G__Lderived=(baconhep::TTau*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTTau),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTVertex))) {
     baconhep::TVertex *G__Lderived;
     G__Lderived=(baconhep::TVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTVertex),G__get_linked_tagnum(&G__BaconDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableBaconDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__BaconDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaconDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaconDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaconDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaconDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__BaconDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaconDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaconDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaconDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaconDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("bitset<kNTrigBit>",117,G__get_linked_tagnum(&G__BaconDictLN_bitsetlE128gR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("bitset<kNTrigObjectBit>",117,G__get_linked_tagnum(&G__BaconDictLN_bitsetlE256gR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<std::string,unsigned int>",117,G__get_linked_tagnum(&G__BaconDictLN_pairlEstringcOunsignedsPintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<string,unsigned int>",117,G__get_linked_tagnum(&G__BaconDictLN_pairlEstringcOunsignedsPintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<std::string,unsigned int> >",117,G__get_linked_tagnum(&G__BaconDictLN_vectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,unsigned int> >",117,G__get_linked_tagnum(&G__BaconDictLN_vectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaconDictLN_reverse_iteratorlEvectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaconDictLN_vectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaconDictLN_reverse_iteratorlEvectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaconDictLN_vectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,unsigned int> >",117,G__get_linked_tagnum(&G__BaconDictLN_vectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<baconhep::TriggerRecord>",117,G__get_linked_tagnum(&G__BaconDictLN_vectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BaconDictLN_reverse_iteratorlEvectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaconDictLN_vectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BaconDictLN_reverse_iteratorlEvectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BaconDictLN_vectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* baconhep */
static void G__setup_memvarbaconhep(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhep));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEEleType),-1,-2,1,G__FastAllocString(2048).Format("kEcalDriven=%lldLL",(long long)baconhep::kEcalDriven).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEEleType),-1,-2,1,G__FastAllocString(2048).Format("kTrackerDriven=%lldLL",(long long)baconhep::kTrackerDriven).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuType),-1,-2,1,G__FastAllocString(2048).Format("kGlobal=%lldLL",(long long)baconhep::kGlobal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuType),-1,-2,1,G__FastAllocString(2048).Format("kTracker=%lldLL",(long long)baconhep::kTracker).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuType),-1,-2,1,G__FastAllocString(2048).Format("kStandalone=%lldLL",(long long)baconhep::kStandalone).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuType),-1,-2,1,G__FastAllocString(2048).Format("kCaloMuon=%lldLL",(long long)baconhep::kCaloMuon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuType),-1,-2,1,G__FastAllocString(2048).Format("kPFMuon=%lldLL",(long long)baconhep::kPFMuon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuType),-1,-2,1,G__FastAllocString(2048).Format("kRPCMuon=%lldLL",(long long)baconhep::kRPCMuon).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kAll=%lldLL",(long long)baconhep::kAll).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kAllGlobalMuons=%lldLL",(long long)baconhep::kAllGlobalMuons).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kAllStandAloneMuons=%lldLL",(long long)baconhep::kAllStandAloneMuons).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kAllTrackerMuons=%lldLL",(long long)baconhep::kAllTrackerMuons).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTrackerMuonArbitrated=%lldLL",(long long)baconhep::kTrackerMuonArbitrated).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kAllArbitrated=%lldLL",(long long)baconhep::kAllArbitrated).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kGlobalMuonPromptTight=%lldLL",(long long)baconhep::kGlobalMuonPromptTight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMLastStationLoose=%lldLL",(long long)baconhep::kTMLastStationLoose).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMLastStationTight=%lldLL",(long long)baconhep::kTMLastStationTight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTM2DCompatibilityLoose=%lldLL",(long long)baconhep::kTM2DCompatibilityLoose).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTM2DCompatibilityTight=%lldLL",(long long)baconhep::kTM2DCompatibilityTight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMOneStationLoose=%lldLL",(long long)baconhep::kTMOneStationLoose).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMOneStationTight=%lldLL",(long long)baconhep::kTMOneStationTight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMLastStationOptimizedLowPtLoose=%lldLL",(long long)baconhep::kTMLastStationOptimizedLowPtLoose).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMLastStationOptimizedLowPtTight=%lldLL",(long long)baconhep::kTMLastStationOptimizedLowPtTight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kGMTkChiCompatibility=%lldLL",(long long)baconhep::kGMTkChiCompatibility).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kGMStaChiCompatibility=%lldLL",(long long)baconhep::kGMStaChiCompatibility).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kGMTkKinkTight=%lldLL",(long long)baconhep::kGMTkKinkTight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMLastStationAngLoose=%lldLL",(long long)baconhep::kTMLastStationAngLoose).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMLastStationAngTight=%lldLL",(long long)baconhep::kTMLastStationAngTight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMOneStationAngLoose=%lldLL",(long long)baconhep::kTMOneStationAngLoose).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMOneStationAngTight=%lldLL",(long long)baconhep::kTMOneStationAngTight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMLastStationOptimizedBarrelLowPtLoose=%lldLL",(long long)baconhep::kTMLastStationOptimizedBarrelLowPtLoose).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kTMLastStationOptimizedBarrelLowPtTight=%lldLL",(long long)baconhep::kTMLastStationOptimizedBarrelLowPtTight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEMuSelectorBit),-1,-2,1,G__FastAllocString(2048).Format("kRPCMuLoose=%lldLL",(long long)baconhep::kRPCMuLoose).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEPhotonType),-1,-2,1,G__FastAllocString(2048).Format("kEGamma=%lldLL",(long long)baconhep::kEGamma).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEPhotonType),-1,-2,1,G__FastAllocString(2048).Format("kPFPhoton=%lldLL",(long long)baconhep::kPFPhoton).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEPhotonType),-1,-2,1,G__FastAllocString(2048).Format("kPFMuonPhoton=%lldLL",(long long)baconhep::kPFMuonPhoton).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByDecayModeFinding=%lldLL",(long long)baconhep::kByDecayModeFinding).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByVLooseIsolation=%lldLL",(long long)baconhep::kByVLooseIsolation).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseIsolation=%lldLL",(long long)baconhep::kByLooseIsolation).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMediumIsolation=%lldLL",(long long)baconhep::kByMediumIsolation).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightIsolation=%lldLL",(long long)baconhep::kByTightIsolation).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByVLooseIsolationDBSumPtCorr=%lldLL",(long long)baconhep::kByVLooseIsolationDBSumPtCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseIsolationDBSumPtCorr=%lldLL",(long long)baconhep::kByLooseIsolationDBSumPtCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMediumIsolationDBSumPtCorr=%lldLL",(long long)baconhep::kByMediumIsolationDBSumPtCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightIsolationDBSumPtCorr=%lldLL",(long long)baconhep::kByTightIsolationDBSumPtCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByVLooseCombinedIsolationDBSumPtCorr=%lldLL",(long long)baconhep::kByVLooseCombinedIsolationDBSumPtCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseCombinedIsolationDBSumPtCorr=%lldLL",(long long)baconhep::kByLooseCombinedIsolationDBSumPtCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMediumCombinedIsolationDBSumPtCorr=%lldLL",(long long)baconhep::kByMediumCombinedIsolationDBSumPtCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightCombinedIsolationDBSumPtCorr=%lldLL",(long long)baconhep::kByTightCombinedIsolationDBSumPtCorr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseCombinedIsolationDBSumPtCorr3Hits=%lldLL",(long long)baconhep::kByLooseCombinedIsolationDBSumPtCorr3Hits).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMediumCombinedIsolationDBSumPtCorr3Hits=%lldLL",(long long)baconhep::kByMediumCombinedIsolationDBSumPtCorr3Hits).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightCombinedIsolationDBSumPtCorr3Hits=%lldLL",(long long)baconhep::kByTightCombinedIsolationDBSumPtCorr3Hits).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseIsolationMVA=%lldLL",(long long)baconhep::kByLooseIsolationMVA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMediumIsolationMVA=%lldLL",(long long)baconhep::kByMediumIsolationMVA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightIsolationMVA=%lldLL",(long long)baconhep::kByTightIsolationMVA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseIsolationMVA2=%lldLL",(long long)baconhep::kByLooseIsolationMVA2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMediumIsolationMVA2=%lldLL",(long long)baconhep::kByMediumIsolationMVA2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightIsolationMVA2=%lldLL",(long long)baconhep::kByTightIsolationMVA2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseElectronRejection=%lldLL",(long long)baconhep::kByLooseElectronRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMediumElectronRejection=%lldLL",(long long)baconhep::kByMediumElectronRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightElectronRejection=%lldLL",(long long)baconhep::kByTightElectronRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMVA3LooseElectronRejection=%lldLL",(long long)baconhep::kByMVA3LooseElectronRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMVA3MediumElectronRejection=%lldLL",(long long)baconhep::kByMVA3MediumElectronRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMVA3TightElectronRejection=%lldLL",(long long)baconhep::kByMVA3TightElectronRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMVA3VTightElectronRejection=%lldLL",(long long)baconhep::kByMVA3VTightElectronRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseMuonRejection=%lldLL",(long long)baconhep::kByLooseMuonRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMediumMuonRejection=%lldLL",(long long)baconhep::kByMediumMuonRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightMuonRejection=%lldLL",(long long)baconhep::kByTightMuonRejection).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseMuonRejection2=%lldLL",(long long)baconhep::kByLooseMuonRejection2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByMediumMuonRejection2=%lldLL",(long long)baconhep::kByMediumMuonRejection2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightMuonRejection2=%lldLL",(long long)baconhep::kByTightMuonRejection2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByLooseMuonRejection3=%lldLL",(long long)baconhep::kByLooseMuonRejection3).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator),-1,-2,1,G__FastAllocString(2048).Format("kByTightMuonRejection3=%lldLL",(long long)baconhep::kByTightMuonRejection3).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TAddJet */
static void G__setup_memvarbaconhepcLcLTAddJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTAddJet));
   { baconhep::TAddJet *p; p=(baconhep::TAddJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->index)-(long)(p)),104,0,0,-1,-1,-1,1,"index=",0,"Index of original jet collection");
   G__memvar_setup((void*)((long)(&p->pt_p1)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_p1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptraw_p1)-(long)(p)),102,0,0,-1,-1,-1,1,"ptraw_p1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_p1)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_p1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_p1)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_p1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass_p1)-(long)(p)),102,0,0,-1,-1,-1,1,"mass_p1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area_p1)-(long)(p)),102,0,0,-1,-1,-1,1,"area_p1=",0,"Jet Info with pruning default   ");
   G__memvar_setup((void*)((long)(&p->pt_p2)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_p2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptraw_p2)-(long)(p)),102,0,0,-1,-1,-1,1,"ptraw_p2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_p2)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_p2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_p2)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_p2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass_p2)-(long)(p)),102,0,0,-1,-1,-1,1,"mass_p2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area_p2)-(long)(p)),102,0,0,-1,-1,-1,1,"area_p2=",0,"Jet Info with pruning Tight ");
   G__memvar_setup((void*)((long)(&p->pt_t1)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_t1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptraw_t1)-(long)(p)),102,0,0,-1,-1,-1,1,"ptraw_t1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_t1)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_t1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_t1)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_t1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass_t1)-(long)(p)),102,0,0,-1,-1,-1,1,"mass_t1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area_t1)-(long)(p)),102,0,0,-1,-1,-1,1,"area_t1=",0,"Jet Info with trimming default   ");
   G__memvar_setup((void*)((long)(&p->pt_t2)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_t2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptraw_t2)-(long)(p)),102,0,0,-1,-1,-1,1,"ptraw_t2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_t2)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_t2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_t2)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_t2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass_t2)-(long)(p)),102,0,0,-1,-1,-1,1,"mass_t2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area_t2)-(long)(p)),102,0,0,-1,-1,-1,1,"area_t2=",0,"Jet Info with trimming Tight ");
   G__memvar_setup((void*)((long)(&p->pt_t3)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_t3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptraw_t3)-(long)(p)),102,0,0,-1,-1,-1,1,"ptraw_t3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_t3)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_t3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_t3)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_t3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass_t3)-(long)(p)),102,0,0,-1,-1,-1,1,"mass_t3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area_t3)-(long)(p)),102,0,0,-1,-1,-1,1,"area_t3=",0,"Jet Info with trimming Tightish");
   G__memvar_setup((void*)((long)(&p->pt_t4)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_t4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptraw_t4)-(long)(p)),102,0,0,-1,-1,-1,1,"ptraw_t4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_t4)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_t4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_t4)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_t4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass_t4)-(long)(p)),102,0,0,-1,-1,-1,1,"mass_t4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area_t4)-(long)(p)),102,0,0,-1,-1,-1,1,"area_t4=",0,"Jet Info with trimming Small cone");
   G__memvar_setup((void*)((long)(&p->pt_f1)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_f1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptraw_f1)-(long)(p)),102,0,0,-1,-1,-1,1,"ptraw_f1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_f1)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_f1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_f1)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_f1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass_f1)-(long)(p)),102,0,0,-1,-1,-1,1,"mass_f1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area_f1)-(long)(p)),102,0,0,-1,-1,-1,1,"area_f1=",0,"Jet Info with filtering default   ");
   G__memvar_setup((void*)((long)(&p->pt_f2)-(long)(p)),102,0,0,-1,-1,-1,1,"pt_f2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptraw_f2)-(long)(p)),102,0,0,-1,-1,-1,1,"ptraw_f2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta_f2)-(long)(p)),102,0,0,-1,-1,-1,1,"eta_f2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi_f2)-(long)(p)),102,0,0,-1,-1,-1,1,"phi_f2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass_f2)-(long)(p)),102,0,0,-1,-1,-1,1,"mass_f2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->area_f2)-(long)(p)),102,0,0,-1,-1,-1,1,"area_f2=",0,"Jet Info with fitlering Tight ");
   G__memvar_setup((void*)((long)(&p->c2_0)-(long)(p)),102,0,0,-1,-1,-1,1,"c2_0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->c2_0P2)-(long)(p)),102,0,0,-1,-1,-1,1,"c2_0P2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->c2_0P5)-(long)(p)),102,0,0,-1,-1,-1,1,"c2_0P5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->c2_1P0)-(long)(p)),102,0,0,-1,-1,-1,1,"c2_1P0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->c2_2P0)-(long)(p)),102,0,0,-1,-1,-1,1,"c2_2P0=",0,"Correlation function of varying exponent");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TElectron */
static void G__setup_memvarbaconhepcLcLTElectron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTElectron));
   { baconhep::TElectron *p; p=(baconhep::TElectron*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,"kinematics");
   G__memvar_setup((void*)((long)(&p->scEt)-(long)(p)),102,0,0,-1,-1,-1,1,"scEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEta)-(long)(p)),102,0,0,-1,-1,-1,1,"scEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"scPhi=",0,"supercluster kinematics");
   G__memvar_setup((void*)((long)(&p->ptHZZ4l)-(long)(p)),102,0,0,-1,-1,-1,1,"ptHZZ4l=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptErrHZZ4l)-(long)(p)),102,0,0,-1,-1,-1,1,"ptErrHZZ4l=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEtHZZ4l)-(long)(p)),102,0,0,-1,-1,-1,1,"scEtHZZ4l=",0,"HZZ4l lepton corrections");
   G__memvar_setup((void*)((long)(&p->r9)-(long)(p)),102,0,0,-1,-1,-1,1,"r9=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalEnergy)-(long)(p)),102,0,0,-1,-1,-1,1,"ecalEnergy=",0,"ECAL energy quantities");
   G__memvar_setup((void*)((long)(&p->pfPt)-(long)(p)),102,0,0,-1,-1,-1,1,"pfPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfEta)-(long)(p)),102,0,0,-1,-1,-1,1,"pfEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"pfPhi=",0,"matching PF-candidate kinematics");
   G__memvar_setup((void*)((long)(&p->trkIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"trkIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"ecalIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"hcalIso03=",0,"detector isolation");
   G__memvar_setup((void*)((long)(&p->chHadIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"chHadIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammaIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"gammaIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neuHadIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"neuHadIso03=",0,"PF isolation variables");
   G__memvar_setup((void*)((long)(&p->chHadIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"chHadIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammaIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"gammaIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neuHadIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"neuHadIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0)-(long)(p)),102,0,0,-1,-1,-1,1,"d0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),102,0,0,-1,-1,-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sip3d)-(long)(p)),102,0,0,-1,-1,-1,1,"sip3d=",0,"impact parameter");
   G__memvar_setup((void*)((long)(&p->sieie)-(long)(p)),102,0,0,-1,-1,-1,1,"sieie=",0,"shower shape");
   G__memvar_setup((void*)((long)(&p->eoverp)-(long)(p)),102,0,0,-1,-1,-1,1,"eoverp=",0,"E/p");
   G__memvar_setup((void*)((long)(&p->hovere)-(long)(p)),102,0,0,-1,-1,-1,1,"hovere=",0,"H/E");
   G__memvar_setup((void*)((long)(&p->fbrem)-(long)(p)),102,0,0,-1,-1,-1,1,"fbrem=",0,"brem fraction");
   G__memvar_setup((void*)((long)(&p->dEtaIn)-(long)(p)),102,0,0,-1,-1,-1,1,"dEtaIn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dPhiIn)-(long)(p)),102,0,0,-1,-1,-1,1,"dPhiIn=",0,"track-supercluster matching");
   G__memvar_setup((void*)((long)(&p->mva)-(long)(p)),102,0,0,-1,-1,-1,1,"mva=",0,"electron ID MVA value");
   G__memvar_setup((void*)((long)(&p->q)-(long)(p)),105,0,0,-1,-1,-1,1,"q=",0,"charge");
   G__memvar_setup((void*)((long)(&p->classification)-(long)(p)),105,0,0,-1,-1,-1,1,"classification=",0,"electron classification");
   G__memvar_setup((void*)((long)(&p->isConv)-(long)(p)),103,0,0,-1,-1,-1,1,"isConv=",0,"identified by track fit based conversion finder?");
   G__memvar_setup((void*)((long)(&p->nMissingHits)-(long)(p)),104,0,0,-1,-1,-1,1,"nMissingHits=",0,"number of missing expected inner hits ");
   G__memvar_setup((void*)((long)(&p->typeBits)-(long)(p)),104,0,0,-1,-1,-1,1,"typeBits=",0,"electron type");
   G__memvar_setup((void*)((long)(&p->fiducialBits)-(long)(p)),104,0,0,-1,-1,-1,1,"fiducialBits=",0,"ECAL fiducial region bits");
   G__memvar_setup((void*)((long)(&p->scID)-(long)(p)),105,0,0,-1,-1,-1,1,"scID=",0,"supercluster ID number (unique per event)");
   G__memvar_setup((void*)((long)(&p->trkID)-(long)(p)),105,0,0,-1,-1,-1,1,"trkID=",0,"track ID number (unique per event)");
   G__memvar_setup((void*)((long)(&p->hltMatchBits)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaconDictLN_bitsetlE256gR),G__defined_typename("TriggerObjects"),-1,1,"hltMatchBits=",0,"HLT matches");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TEventInfo */
static void G__setup_memvarbaconhepcLcLTEventInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTEventInfo));
   { baconhep::TEventInfo *p; p=(baconhep::TEventInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->runNum)-(long)(p)),104,0,0,-1,-1,-1,1,"runNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->evtNum)-(long)(p)),104,0,0,-1,-1,-1,1,"evtNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lumiSec)-(long)(p)),104,0,0,-1,-1,-1,1,"lumiSec=",0,"run number, event number, lumi section in data");
   G__memvar_setup((void*)((long)(&p->metFilterFailBits)-(long)(p)),104,0,0,-1,-1,-1,1,"metFilterFailBits=",0,"MET filter fail bits");
   G__memvar_setup((void*)((long)(&p->nPU)-(long)(p)),104,0,0,-1,-1,-1,1,"nPU=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPUm)-(long)(p)),104,0,0,-1,-1,-1,1,"nPUm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPUp)-(long)(p)),104,0,0,-1,-1,-1,1,"nPUp=",0,"number of reconstructed pile-up vertices");
   G__memvar_setup((void*)((long)(&p->nPUmean)-(long)(p)),102,0,0,-1,-1,-1,1,"nPUmean=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPUmeanm)-(long)(p)),102,0,0,-1,-1,-1,1,"nPUmeanm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPUmeanp)-(long)(p)),102,0,0,-1,-1,-1,1,"nPUmeanp=",0,"expected number of reconstructed pile-up vertices");
   G__memvar_setup((void*)((long)(&p->pvx)-(long)(p)),102,0,0,-1,-1,-1,1,"pvx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvy)-(long)(p)),102,0,0,-1,-1,-1,1,"pvy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pvz)-(long)(p)),102,0,0,-1,-1,-1,1,"pvz=",0,"best primary vertex");
   G__memvar_setup((void*)((long)(&p->bsx)-(long)(p)),102,0,0,-1,-1,-1,1,"bsx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bsy)-(long)(p)),102,0,0,-1,-1,-1,1,"bsy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bsz)-(long)(p)),102,0,0,-1,-1,-1,1,"bsz=",0,"beamspot");
   G__memvar_setup((void*)((long)(&p->pfMET)-(long)(p)),102,0,0,-1,-1,-1,1,"pfMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMETphi)-(long)(p)),102,0,0,-1,-1,-1,1,"pfMETphi=",0,"particle flow MET");
   G__memvar_setup((void*)((long)(&p->pfMETCov00)-(long)(p)),102,0,0,-1,-1,-1,1,"pfMETCov00=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMETCov01)-(long)(p)),102,0,0,-1,-1,-1,1,"pfMETCov01=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfMETCov11)-(long)(p)),102,0,0,-1,-1,-1,1,"pfMETCov11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaMET)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaMETphi)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMETphi=",0,"MVA MET");
   G__memvar_setup((void*)((long)(&p->mvaMETCov00)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMETCov00=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaMETCov01)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMETCov01=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaMETCov11)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMETCov11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaMETU)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMETU=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaMETUphi)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMETUphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaMETUCov00)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMETUCov00=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaMETUCov01)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMETUCov01=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mvaMETUCov11)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaMETUCov11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trkMET)-(long)(p)),102,0,0,-1,-1,-1,1,"trkMET=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trkMETphi)-(long)(p)),102,0,0,-1,-1,-1,1,"trkMETphi=",0,"track MET");
   G__memvar_setup((void*)((long)(&p->rhoIso)-(long)(p)),102,0,0,-1,-1,-1,1,"rhoIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rhoJet)-(long)(p)),102,0,0,-1,-1,-1,1,"rhoJet=",0,"event energy density");
   G__memvar_setup((void*)((long)(&p->triggerBits)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaconDictLN_bitsetlE128gR),G__defined_typename("TriggerBits"),-1,1,"triggerBits=",0,"fired trigger bits");
   G__memvar_setup((void*)((long)(&p->hasGoodPV)-(long)(p)),103,0,0,-1,-1,-1,1,"hasGoodPV=",0,"event has a good PV?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TGenEventInfo */
static void G__setup_memvarbaconhepcLcLTGenEventInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenEventInfo));
   { baconhep::TGenEventInfo *p; p=(baconhep::TGenEventInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->id_1)-(long)(p)),105,0,0,-1,-1,-1,1,"id_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->id_2)-(long)(p)),105,0,0,-1,-1,-1,1,"id_2=",0,"parton flavor PDG ID");
   G__memvar_setup((void*)((long)(&p->x_1)-(long)(p)),102,0,0,-1,-1,-1,1,"x_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x_2)-(long)(p)),102,0,0,-1,-1,-1,1,"x_2=",0,"parton momentum fraction");
   G__memvar_setup((void*)((long)(&p->scalePDF)-(long)(p)),102,0,0,-1,-1,-1,1,"scalePDF=",0,"Q-scale used for PDF evaluation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TGenParticle */
static void G__setup_memvarbaconhepcLcLTGenParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenParticle));
   { baconhep::TGenParticle *p; p=(baconhep::TGenParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->parent)-(long)(p)),105,0,0,-1,-1,-1,1,"parent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdgId)-(long)(p)),105,0,0,-1,-1,-1,1,"pdgId=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,-1,-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,-1,-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,-1,-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TJet */
static void G__setup_memvarbaconhepcLcLTJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTJet));
   { baconhep::TJet *p; p=(baconhep::TJet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),102,0,0,-1,-1,-1,1,"mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptRaw)-(long)(p)),102,0,0,-1,-1,-1,1,"ptRaw=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->unc)-(long)(p)),102,0,0,-1,-1,-1,1,"unc=",0,"kinematics");
   G__memvar_setup((void*)((long)(&p->area)-(long)(p)),102,0,0,-1,-1,-1,1,"area=",0,"jet area (from FastJet)");
   G__memvar_setup((void*)((long)(&p->d0)-(long)(p)),102,0,0,-1,-1,-1,1,"d0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),102,0,0,-1,-1,-1,1,"dz=",0,"impact parameter of leading charged constituent");
   G__memvar_setup((void*)((long)(&p->csv)-(long)(p)),102,0,0,-1,-1,-1,1,"csv=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->csv1)-(long)(p)),102,0,0,-1,-1,-1,1,"csv1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->csv2)-(long)(p)),102,0,0,-1,-1,-1,1,"csv2=",0,"combined secondary vertex based b-tagger and for two leading subjets");
   G__memvar_setup((void*)((long)(&p->mva)-(long)(p)),102,0,0,-1,-1,-1,1,"mva=",0,"Pile-up discriminator MVA");
   G__memvar_setup((void*)((long)(&p->qgid)-(long)(p)),102,0,0,-1,-1,-1,1,"qgid=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qg1)-(long)(p)),102,0,0,-1,-1,-1,1,"qg1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->qg2)-(long)(p)),102,0,0,-1,-1,-1,1,"qg2=",0,"Quark Gluon Id for jet and subjets");
   G__memvar_setup((void*)((long)(&p->tau1)-(long)(p)),102,0,0,-1,-1,-1,1,"tau1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau2)-(long)(p)),102,0,0,-1,-1,-1,1,"tau2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau3)-(long)(p)),102,0,0,-1,-1,-1,1,"tau3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tau4)-(long)(p)),102,0,0,-1,-1,-1,1,"tau4=",0,"N Subjettiness variables");
   G__memvar_setup((void*)((long)(&p->prunedm)-(long)(p)),102,0,0,-1,-1,-1,1,"prunedm=",0,"Pruned Jet Mass");
   G__memvar_setup((void*)((long)(&p->nCharged)-(long)(p)),104,0,0,-1,-1,-1,1,"nCharged=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nNeutrals)-(long)(p)),104,0,0,-1,-1,-1,1,"nNeutrals=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nParticles)-(long)(p)),104,0,0,-1,-1,-1,1,"nParticles=",0,"constituent multiplicity");
   G__memvar_setup((void*)((long)(&p->beta)-(long)(p)),102,0,0,-1,-1,-1,1,"beta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->betaStar)-(long)(p)),102,0,0,-1,-1,-1,1,"betaStar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dR2Mean)-(long)(p)),102,0,0,-1,-1,-1,1,"dR2Mean=",0,"PU Jet Id Variables");
   G__memvar_setup((void*)((long)(&p->ptD)-(long)(p)),102,0,0,-1,-1,-1,1,"ptD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->q)-(long)(p)),102,0,0,-1,-1,-1,1,"q=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pull)-(long)(p)),102,0,0,-1,-1,-1,1,"pull=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pullAngle)-(long)(p)),102,0,0,-1,-1,-1,1,"pullAngle=",0,"Additional color flow variables");
   G__memvar_setup((void*)((long)(&p->chEmFrac)-(long)(p)),102,0,0,-1,-1,-1,1,"chEmFrac=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neuEmFrac)-(long)(p)),102,0,0,-1,-1,-1,1,"neuEmFrac=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chHadFrac)-(long)(p)),102,0,0,-1,-1,-1,1,"chHadFrac=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neuHadFrac)-(long)(p)),102,0,0,-1,-1,-1,1,"neuHadFrac=",0,"fractional contribution by type");
   G__memvar_setup((void*)((long)(&p->mcFlavor)-(long)(p)),105,0,0,-1,-1,-1,1,"mcFlavor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mcFlavorPhys)-(long)(p)),105,0,0,-1,-1,-1,1,"mcFlavorPhys=",0,"Flavor");
   G__memvar_setup((void*)((long)(&p->genpt)-(long)(p)),102,0,0,-1,-1,-1,1,"genpt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->geneta)-(long)(p)),102,0,0,-1,-1,-1,1,"geneta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genphi)-(long)(p)),102,0,0,-1,-1,-1,1,"genphi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->genm)-(long)(p)),102,0,0,-1,-1,-1,1,"genm=",0,"Gen Matched values");
   G__memvar_setup((void*)((long)(&p->hltMatchBits)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaconDictLN_bitsetlE256gR),G__defined_typename("TriggerObjects"),-1,1,"hltMatchBits=",0,"HLT matching");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TMuon */
static void G__setup_memvarbaconhepcLcLTMuon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTMuon));
   { baconhep::TMuon *p; p=(baconhep::TMuon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptErr)-(long)(p)),102,0,0,-1,-1,-1,1,"ptErr=",0,"kinematics");
   G__memvar_setup((void*)((long)(&p->ptHZZ4l)-(long)(p)),102,0,0,-1,-1,-1,1,"ptHZZ4l=",0,"HZZ4l lepton corrections");
   G__memvar_setup((void*)((long)(&p->staPt)-(long)(p)),102,0,0,-1,-1,-1,1,"staPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->staEta)-(long)(p)),102,0,0,-1,-1,-1,1,"staEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->staPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"staPhi=",0,"STA track kinematics");
   G__memvar_setup((void*)((long)(&p->pfPt)-(long)(p)),102,0,0,-1,-1,-1,1,"pfPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfEta)-(long)(p)),102,0,0,-1,-1,-1,1,"pfEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"pfPhi=",0,"matched PFCandidate");
   G__memvar_setup((void*)((long)(&p->trkIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"trkIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"ecalIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"hcalIso03=",0,"detector isolation");
   G__memvar_setup((void*)((long)(&p->chHadIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"chHadIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammaIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"gammaIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neuHadIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"neuHadIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"puIso03=",0,"PF isolation variables");
   G__memvar_setup((void*)((long)(&p->chHadIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"chHadIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammaIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"gammaIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neuHadIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"neuHadIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->puIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"puIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d0)-(long)(p)),102,0,0,-1,-1,-1,1,"d0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),102,0,0,-1,-1,-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sip3d)-(long)(p)),102,0,0,-1,-1,-1,1,"sip3d=",0,"impact parameter");
   G__memvar_setup((void*)((long)(&p->tkNchi2)-(long)(p)),102,0,0,-1,-1,-1,1,"tkNchi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muNchi2)-(long)(p)),102,0,0,-1,-1,-1,1,"muNchi2=",0,"track fit normalized chi-square");
   G__memvar_setup((void*)((long)(&p->trkKink)-(long)(p)),102,0,0,-1,-1,-1,1,"trkKink=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->glbKink)-(long)(p)),102,0,0,-1,-1,-1,1,"glbKink=",0,"track kink");
   G__memvar_setup((void*)((long)(&p->q)-(long)(p)),105,0,0,-1,-1,-1,1,"q=",0,"charge");
   G__memvar_setup((void*)((long)(&p->nValidHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nValidHits=",0,"number of valid muon hits in global fit");
   G__memvar_setup((void*)((long)(&p->typeBits)-(long)(p)),104,0,0,-1,-1,-1,1,"typeBits=",0,"muon type bits");
   G__memvar_setup((void*)((long)(&p->selectorBits)-(long)(p)),104,0,0,-1,-1,-1,1,"selectorBits=",0,"MuonSelector bits");
   G__memvar_setup((void*)((long)(&p->nTkHits)-(long)(p)),104,0,0,-1,-1,-1,1,"nTkHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPixHits)-(long)(p)),104,0,0,-1,-1,-1,1,"nPixHits=",0,"number of hits in tracker");
   G__memvar_setup((void*)((long)(&p->nTkLayers)-(long)(p)),104,0,0,-1,-1,-1,1,"nTkLayers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPixLayers)-(long)(p)),104,0,0,-1,-1,-1,1,"nPixLayers=",0,"number of hit layers in tracker");
   G__memvar_setup((void*)((long)(&p->nMatchStn)-(long)(p)),104,0,0,-1,-1,-1,1,"nMatchStn=",0,"number of stations with muon segments");
   G__memvar_setup((void*)((long)(&p->trkID)-(long)(p)),105,0,0,-1,-1,-1,1,"trkID=",0,"tracker track ID (unique per event)");
   G__memvar_setup((void*)((long)(&p->hltMatchBits)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaconDictLN_bitsetlE256gR),G__defined_typename("TriggerObjects"),-1,1,"hltMatchBits=",0,"HLT matching");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TPFPart */
static void G__setup_memvarbaconhepcLcLTPFPart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPFPart));
   { baconhep::TPFPart *p; p=(baconhep::TPFPart*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m)-(long)(p)),102,0,0,-1,-1,-1,1,"m=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),102,0,0,-1,-1,-1,1,"e=",0,"kinematics");
   G__memvar_setup((void*)((long)(&p->q)-(long)(p)),105,0,0,-1,-1,-1,1,"q=",0,"charge");
   G__memvar_setup((void*)((long)(&p->pfType)-(long)(p)),105,0,0,-1,-1,-1,1,"pfType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vtxId)-(long)(p)),105,0,0,-1,-1,-1,1,"vtxId=",0,"Vertex Id from Vertex Collection");
   G__memvar_setup((void*)((long)(&p->trkChi2)-(long)(p)),102,0,0,-1,-1,-1,1,"trkChi2=",0,"Track Chi2");
   G__memvar_setup((void*)((long)(&p->vtxChi2)-(long)(p)),102,0,0,-1,-1,-1,1,"vtxChi2=",0,"Vertex Chi2");
   G__memvar_setup((void*)((long)(&p->ecalE)-(long)(p)),102,0,0,-1,-1,-1,1,"ecalE=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalE)-(long)(p)),102,0,0,-1,-1,-1,1,"hcalE=",0,"Calorimeter Energy");
   G__memvar_setup((void*)((long)(&p->d0)-(long)(p)),102,0,0,-1,-1,-1,1,"d0=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),102,0,0,-1,-1,-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),102,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->depth)-(long)(p)),102,0,0,-1,-1,-1,1,"depth=",0,"Usefule Info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TPhoton */
static void G__setup_memvarbaconhepcLcLTPhoton(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPhoton));
   { baconhep::TPhoton *p; p=(baconhep::TPhoton*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,"kinematics");
   G__memvar_setup((void*)((long)(&p->scEt)-(long)(p)),102,0,0,-1,-1,-1,1,"scEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scEta)-(long)(p)),102,0,0,-1,-1,-1,1,"scEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"scPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->r9)-(long)(p)),102,0,0,-1,-1,-1,1,"r9=",0,"SuperCluster kinematics");
   G__memvar_setup((void*)((long)(&p->pfPt)-(long)(p)),102,0,0,-1,-1,-1,1,"pfPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfEta)-(long)(p)),102,0,0,-1,-1,-1,1,"pfEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pfPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"pfPhi=",0,"matching PF-candidate kinematics");
   G__memvar_setup((void*)((long)(&p->trkIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"trkIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ecalIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"ecalIso04=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hcalIso04)-(long)(p)),102,0,0,-1,-1,-1,1,"hcalIso04=",0,"detector isolation");
   G__memvar_setup((void*)((long)(&p->chHadIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"chHadIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->gammaIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"gammaIso03=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neuHadIso03)-(long)(p)),102,0,0,-1,-1,-1,1,"neuHadIso03=",0,"PF isolation variables");
   G__memvar_setup((void*)((long)(&p->isoForFsr03)-(long)(p)),102,0,0,-1,-1,-1,1,"isoForFsr03=",0,"PF-based isolation for HZZ4l FSR recovery");
   G__memvar_setup((void*)((long)(&p->mvaNothingGamma)-(long)(p)),102,0,0,-1,-1,-1,1,"mvaNothingGamma=",0,"PF MVA for gamma detection");
   G__memvar_setup((void*)((long)(&p->hovere)-(long)(p)),102,0,0,-1,-1,-1,1,"hovere=",0,"H/E");
   G__memvar_setup((void*)((long)(&p->sieie)-(long)(p)),102,0,0,-1,-1,-1,1,"sieie=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sipip)-(long)(p)),102,0,0,-1,-1,-1,1,"sipip=",0,"shower shape");
   G__memvar_setup((void*)((long)(&p->fiducialBits)-(long)(p)),104,0,0,-1,-1,-1,1,"fiducialBits=",0,"ECAL fiducial region");
   G__memvar_setup((void*)((long)(&p->typeBits)-(long)(p)),104,0,0,-1,-1,-1,1,"typeBits=",0,"photon type");
   G__memvar_setup((void*)((long)(&p->scID)-(long)(p)),105,0,0,-1,-1,-1,1,"scID=",0,"supercluster ID (unique per event)");
   G__memvar_setup((void*)((long)(&p->hasPixelSeed)-(long)(p)),103,0,0,-1,-1,-1,1,"hasPixelSeed=",0,"has pixel seed?");
   G__memvar_setup((void*)((long)(&p->isConv)-(long)(p)),103,0,0,-1,-1,-1,1,"isConv=",0,"matched to a reconstructed conversion?");
   G__memvar_setup((void*)((long)(&p->hltMatchBits)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaconDictLN_bitsetlE256gR),G__defined_typename("TriggerObjects"),-1,1,"hltMatchBits=",0,"HLT matches");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TTau */
static void G__setup_memvarbaconhepcLcLTTau(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTTau));
   { baconhep::TTau *p; p=(baconhep::TTau*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),102,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),102,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m)-(long)(p)),102,0,0,-1,-1,-1,1,"m=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->e)-(long)(p)),102,0,0,-1,-1,-1,1,"e=",0,"kinematics");
   G__memvar_setup((void*)((long)(&p->q)-(long)(p)),105,0,0,-1,-1,-1,1,"q=",0,"charge");
   G__memvar_setup((void*)((long)(&p->dzLeadChHad)-(long)(p)),102,0,0,-1,-1,-1,1,"dzLeadChHad=",0,"longitudinal impact parameter of leading charged hadron");
   G__memvar_setup((void*)((long)(&p->nSignalChHad)-(long)(p)),104,0,0,-1,-1,-1,1,"nSignalChHad=",0,"number of charged hadrons in tau");
   G__memvar_setup((void*)((long)(&p->nSignalGamma)-(long)(p)),104,0,0,-1,-1,-1,1,"nSignalGamma=",0,"number of photons in tau     ");
   G__memvar_setup((void*)((long)(&p->ringIso)-(long)(p)),102,0,0,-1,-1,-1,1,"ringIso=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ringIso2)-(long)(p)),102,0,0,-1,-1,-1,1,"ringIso2=",0,"ring isolation");
   G__memvar_setup((void*)((long)(&p->antiEleMVA3)-(long)(p)),102,0,0,-1,-1,-1,1,"antiEleMVA3=",0,"anti-electron MVA");
   G__memvar_setup((void*)((long)(&p->antiEleMVA3Cat)-(long)(p)),102,0,0,-1,-1,-1,1,"antiEleMVA3Cat=",0,"anti-electron MVA category");
   G__memvar_setup((void*)((long)(&p->rawIso3Hits)-(long)(p)),102,0,0,-1,-1,-1,1,"rawIso3Hits=",0,"raw Iso 3 hits");
   G__memvar_setup((void*)((long)(&p->rawIsoMVA3)-(long)(p)),102,0,0,-1,-1,-1,1,"rawIsoMVA3=",0,"raw Iso MVA3");
   G__memvar_setup((void*)((long)(&p->hpsDisc)-(long)(p)),107,0,0,-1,-1,-1,1,"hpsDisc=",0,"HPS tau discriminators");
   G__memvar_setup((void*)((long)(&p->hltMatchBits)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BaconDictLN_bitsetlE256gR),G__defined_typename("TriggerObjects"),-1,1,"hltMatchBits=",0,"HLT matches");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* baconhep::TVertex */
static void G__setup_memvarbaconhepcLcLTVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTVertex));
   { baconhep::TVertex *p; p=(baconhep::TVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nTracksFit)-(long)(p)),104,0,0,-1,-1,-1,1,"nTracksFit=",0,"number of tracks in vertex fit");
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),102,0,0,-1,-1,-1,1,"ndof=",0,"vertex fit number of degrees of freedom");
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),102,0,0,-1,-1,-1,1,"chi2=",0,"vertex fit chi-square");
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),102,0,0,-1,-1,-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->y)-(long)(p)),102,0,0,-1,-1,-1,1,"y=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->z)-(long)(p)),102,0,0,-1,-1,-1,1,"z=",0,"position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BaconDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarBaconDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncbaconhep(void) {
   /* baconhep */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhep));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTAddJet(void) {
   /* baconhep::TAddJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTAddJet));
   G__memfunc_setup("TAddJet",640,G__BaconDict_175_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTAddJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_175_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TAddJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_175_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TAddJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_175_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TAddJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_175_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TAddJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_175_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_175_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TAddJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_175_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TAddJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_175_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TAddJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_175_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TAddJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TAddJet", 640, G__BaconDict_175_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTAddJet), -1, 0, 1, 1, 1, 0, "u 'baconhep::TAddJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TAddJet", 766, G__BaconDict_175_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_175_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTAddJet), -1, 1, 1, 1, 1, 0, "u 'baconhep::TAddJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTElectron(void) {
   /* baconhep::TElectron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTElectron));
   G__memfunc_setup("TElectron",912,G__BaconDict_176_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTElectron), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_176_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TElectron::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_176_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TElectron::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_176_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TElectron::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_176_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TElectron::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_176_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_176_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TElectron::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_176_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TElectron::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_176_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TElectron::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_176_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TElectron::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TElectron", 912, G__BaconDict_176_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTElectron), -1, 0, 1, 1, 1, 0, "u 'baconhep::TElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TElectron", 1038, G__BaconDict_176_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_176_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTElectron), -1, 1, 1, 1, 1, 0, "u 'baconhep::TElectron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTEventInfo(void) {
   /* baconhep::TEventInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTEventInfo));
   G__memfunc_setup("TEventInfo",994,G__BaconDict_178_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTEventInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_178_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TEventInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_178_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TEventInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_178_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TEventInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_178_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TEventInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_178_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_178_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TEventInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_178_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TEventInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_178_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TEventInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_178_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TEventInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TEventInfo", 994, G__BaconDict_178_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTEventInfo), -1, 0, 1, 1, 1, 0, "u 'baconhep::TEventInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TEventInfo", 1120, G__BaconDict_178_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_178_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTEventInfo), -1, 1, 1, 1, 1, 0, "u 'baconhep::TEventInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTGenEventInfo(void) {
   /* baconhep::TGenEventInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenEventInfo));
   G__memfunc_setup("TGenEventInfo",1276,G__BaconDict_179_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenEventInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_179_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TGenEventInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_179_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TGenEventInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_179_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TGenEventInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_179_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TGenEventInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_179_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_179_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TGenEventInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_179_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TGenEventInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_179_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TGenEventInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_179_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TGenEventInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGenEventInfo", 1276, G__BaconDict_179_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenEventInfo), -1, 0, 1, 1, 1, 0, "u 'baconhep::TGenEventInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGenEventInfo", 1402, G__BaconDict_179_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_179_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenEventInfo), -1, 1, 1, 1, 1, 0, "u 'baconhep::TGenEventInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTGenParticle(void) {
   /* baconhep::TGenParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenParticle));
   G__memfunc_setup("TGenParticle",1186,G__BaconDict_180_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_180_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TGenParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_180_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TGenParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_180_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TGenParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_180_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TGenParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_180_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_180_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TGenParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_180_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TGenParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_180_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TGenParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_180_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TGenParticle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TGenParticle", 1186, G__BaconDict_180_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenParticle), -1, 0, 1, 1, 1, 0, "u 'baconhep::TGenParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TGenParticle", 1312, G__BaconDict_180_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_180_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTGenParticle), -1, 1, 1, 1, 1, 0, "u 'baconhep::TGenParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTJet(void) {
   /* baconhep::TJet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTJet));
   G__memfunc_setup("TJet",375,G__BaconDict_181_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTJet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_181_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TJet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_181_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TJet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_181_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TJet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_181_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TJet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_181_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_181_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TJet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_181_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TJet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_181_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TJet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_181_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TJet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TJet", 375, G__BaconDict_181_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTJet), -1, 0, 1, 1, 1, 0, "u 'baconhep::TJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TJet", 501, G__BaconDict_181_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_181_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTJet), -1, 1, 1, 1, 1, 0, "u 'baconhep::TJet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTMuon(void) {
   /* baconhep::TMuon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTMuon));
   G__memfunc_setup("TMuon",499,G__BaconDict_182_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTMuon), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_182_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TMuon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_182_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TMuon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_182_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TMuon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_182_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TMuon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_182_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_182_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TMuon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_182_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TMuon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_182_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TMuon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_182_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TMuon::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TMuon", 499, G__BaconDict_182_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTMuon), -1, 0, 1, 1, 1, 0, "u 'baconhep::TMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TMuon", 625, G__BaconDict_182_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_182_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTMuon), -1, 1, 1, 1, 1, 0, "u 'baconhep::TMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTPFPart(void) {
   /* baconhep::TPFPart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPFPart));
   G__memfunc_setup("TPFPart",641,G__BaconDict_185_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPFPart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_185_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TPFPart::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_185_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TPFPart::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_185_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TPFPart::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_185_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TPFPart::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_185_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_185_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TPFPart::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_185_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TPFPart::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_185_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TPFPart::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_185_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TPFPart::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPFPart", 641, G__BaconDict_185_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPFPart), -1, 0, 1, 1, 1, 0, "u 'baconhep::TPFPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPFPart", 767, G__BaconDict_185_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_185_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPFPart), -1, 1, 1, 1, 1, 0, "u 'baconhep::TPFPart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTPhoton(void) {
   /* baconhep::TPhoton */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPhoton));
   G__memfunc_setup("TPhoton",716,G__BaconDict_186_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPhoton), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_186_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TPhoton::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_186_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TPhoton::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_186_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TPhoton::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_186_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TPhoton::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_186_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_186_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TPhoton::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_186_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TPhoton::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_186_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TPhoton::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_186_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TPhoton::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TPhoton", 716, G__BaconDict_186_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPhoton), -1, 0, 1, 1, 1, 0, "u 'baconhep::TPhoton' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TPhoton", 842, G__BaconDict_186_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_186_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTPhoton), -1, 1, 1, 1, 1, 0, "u 'baconhep::TPhoton' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTTau(void) {
   /* baconhep::TTau */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTTau));
   G__memfunc_setup("TTau",382,G__BaconDict_188_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTTau), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_188_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TTau::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_188_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TTau::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_188_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TTau::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_188_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TTau::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_188_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_188_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TTau::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_188_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TTau::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_188_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TTau::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_188_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TTau::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TTau", 382, G__BaconDict_188_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTTau), -1, 0, 1, 1, 1, 0, "u 'baconhep::TTau' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TTau", 508, G__BaconDict_188_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_188_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTTau), -1, 1, 1, 1, 1, 0, "u 'baconhep::TTau' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncbaconhepcLcLTVertex(void) {
   /* baconhep::TVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTVertex));
   G__memfunc_setup("TVertex",722,G__BaconDict_201_0_1, 105, G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BaconDict_201_0_2, 85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&baconhep::TVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BaconDict_201_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BaconDict_201_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&baconhep::TVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BaconDict_201_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&baconhep::TVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BaconDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BaconDict_201_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BaconDict_201_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BaconDict_201_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BaconDict_201_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&baconhep::TVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BaconDict_201_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&baconhep::TVertex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TVertex", 722, G__BaconDict_201_0_14, (int) ('i'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTVertex), -1, 0, 1, 1, 1, 0, "u 'baconhep::TVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TVertex", 848, G__BaconDict_201_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BaconDict_201_0_16, (int) ('u'), G__get_linked_tagnum(&G__BaconDictLN_baconhepcLcLTVertex), -1, 1, 1, 1, 1, 0, "u 'baconhep::TVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncBaconDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalBaconDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcBaconDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__BaconDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_bitsetlE128gR = { "bitset<128>" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_bitsetlE256gR = { "bitset<256>" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhep = { "baconhep" , 110 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTAddJet = { "baconhep::TAddJet" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTElectron = { "baconhep::TElectron" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLEEleType = { "baconhep::EEleType" , 101 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTEventInfo = { "baconhep::TEventInfo" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTGenEventInfo = { "baconhep::TGenEventInfo" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTGenParticle = { "baconhep::TGenParticle" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTJet = { "baconhep::TJet" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTMuon = { "baconhep::TMuon" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLEMuType = { "baconhep::EMuType" , 101 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLEMuSelectorBit = { "baconhep::EMuSelectorBit" , 101 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTPFPart = { "baconhep::TPFPart" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTPhoton = { "baconhep::TPhoton" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLEPhotonType = { "baconhep::EPhotonType" , 101 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTTau = { "baconhep::TTau" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLEHPSDiscriminator = { "baconhep::EHPSDiscriminator" , 101 , -1 };
G__linked_taginfo G__BaconDictLN_pairlEstringcOunsignedsPintgR = { "pair<string,unsigned int>" , 115 , -1 };
G__linked_taginfo G__BaconDictLN_vectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgR = { "vector<pair<string,unsigned int>,allocator<pair<string,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_reverse_iteratorlEvectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<string,unsigned int>,allocator<pair<string,unsigned int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_vectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgR = { "vector<baconhep::TriggerRecord,allocator<baconhep::TriggerRecord> >" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_reverse_iteratorlEvectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<baconhep::TriggerRecord,allocator<baconhep::TriggerRecord> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BaconDictLN_baconhepcLcLTVertex = { "baconhep::TVertex" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableBaconDict() {
  G__BaconDictLN_TClass.tagnum = -1 ;
  G__BaconDictLN_TBuffer.tagnum = -1 ;
  G__BaconDictLN_TMemberInspector.tagnum = -1 ;
  G__BaconDictLN_TObject.tagnum = -1 ;
  G__BaconDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__BaconDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BaconDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__BaconDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BaconDictLN_bitsetlE128gR.tagnum = -1 ;
  G__BaconDictLN_bitsetlE256gR.tagnum = -1 ;
  G__BaconDictLN_baconhep.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTAddJet.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTElectron.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLEEleType.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTEventInfo.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTGenEventInfo.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTGenParticle.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTJet.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTMuon.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLEMuType.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLEMuSelectorBit.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTPFPart.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTPhoton.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLEPhotonType.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTTau.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLEHPSDiscriminator.tagnum = -1 ;
  G__BaconDictLN_pairlEstringcOunsignedsPintgR.tagnum = -1 ;
  G__BaconDictLN_vectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__BaconDictLN_reverse_iteratorlEvectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BaconDictLN_vectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgR.tagnum = -1 ;
  G__BaconDictLN_reverse_iteratorlEvectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BaconDictLN_baconhepcLcLTVertex.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableBaconDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__BaconDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_bitsetlE128gR);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_bitsetlE256gR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhep),0,-1,0,(char*)NULL,G__setup_memvarbaconhep,G__setup_memfuncbaconhep);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTAddJet),sizeof(baconhep::TAddJet),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTAddJet,G__setup_memfuncbaconhepcLcLTAddJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTElectron),sizeof(baconhep::TElectron),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTElectron,G__setup_memfuncbaconhepcLcLTElectron);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLEEleType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTEventInfo),sizeof(baconhep::TEventInfo),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTEventInfo,G__setup_memfuncbaconhepcLcLTEventInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTGenEventInfo),sizeof(baconhep::TGenEventInfo),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTGenEventInfo,G__setup_memfuncbaconhepcLcLTGenEventInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTGenParticle),sizeof(baconhep::TGenParticle),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTGenParticle,G__setup_memfuncbaconhepcLcLTGenParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTJet),sizeof(baconhep::TJet),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTJet,G__setup_memfuncbaconhepcLcLTJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTMuon),sizeof(baconhep::TMuon),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTMuon,G__setup_memfuncbaconhepcLcLTMuon);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLEMuType);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLEMuSelectorBit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTPFPart),sizeof(baconhep::TPFPart),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTPFPart,G__setup_memfuncbaconhepcLcLTPFPart);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTPhoton),sizeof(baconhep::TPhoton),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTPhoton,G__setup_memfuncbaconhepcLcLTPhoton);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLEPhotonType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTTau),sizeof(baconhep::TTau),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTTau,G__setup_memfuncbaconhepcLcLTTau);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLEHPSDiscriminator);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_pairlEstringcOunsignedsPintgR);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_vectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_reverse_iteratorlEvectorlEpairlEstringcOunsignedsPintgRcOallocatorlEpairlEstringcOunsignedsPintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_vectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgR);
   G__get_linked_tagnum_fwd(&G__BaconDictLN_reverse_iteratorlEvectorlEbaconhepcLcLTriggerRecordcOallocatorlEbaconhepcLcLTriggerRecordgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BaconDictLN_baconhepcLcLTVertex),sizeof(baconhep::TVertex),-1,292096,(char*)NULL,G__setup_memvarbaconhepcLcLTVertex,G__setup_memfuncbaconhepcLcLTVertex);
}
extern "C" void G__cpp_setupBaconDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupBaconDict()");
  G__set_cpp_environmentBaconDict();
  G__cpp_setup_tagtableBaconDict();

  G__cpp_setup_inheritanceBaconDict();

  G__cpp_setup_typetableBaconDict();

  G__cpp_setup_memvarBaconDict();

  G__cpp_setup_memfuncBaconDict();
  G__cpp_setup_globalBaconDict();
  G__cpp_setup_funcBaconDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncBaconDict();
  return;
}
class G__cpp_setup_initBaconDict {
  public:
    G__cpp_setup_initBaconDict() { G__add_setup_func("BaconDict",(G__incsetup)(&G__cpp_setupBaconDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initBaconDict() { G__remove_setup_func("BaconDict"); }
};
G__cpp_setup_initBaconDict G__cpp_setup_initializerBaconDict;

